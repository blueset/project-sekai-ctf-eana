{
.appVersion = "1346";
copyright = "flag Mono is a modified typeface based on Cascadia Code of Microsoft. Â© 2021 Microsoft Corporation. All Rights Reserved.";
customParameters = (
{
name = vendorID;
value = SAJA;
},
{
name = panose;
value = (
2,
11,
6,
9,
2,
0,
0,
2,
0,
4
);
},
{
name = unicodeRanges;
value = (
0
);
},
{
name = fsType;
value = (
);
},
{
name = glyphOrder;
value = (
.notdef,
exclam,
quotedbl,
numbersign,
dollar,
percent,
ampersand,
quotesingle,
parenleft,
parenright,
asterisk,
plus,
comma,
hyphen,
period,
slash,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
colon,
semicolon,
less,
equal,
greater,
question,
at,
A,
B,
C,
D,
E,
F,
G,
H,
I,
J,
K,
L,
M,
N,
O,
P,
Q,
R,
S,
T,
U,
V,
W,
X,
Y,
Z,
bracketleft,
backslash,
bracketright,
asciicircum,
underscore,
grave,
a,
b,
c,
d,
e,
f,
g,
h,
i,
j,
k,
l,
m,
n,
o,
p,
q,
r,
s,
t,
u,
v,
w,
x,
y,
z,
braceleft,
bar,
braceright,
asciitilde
);
}
);
date = "2019-04-07 17:18:29 +0000";
disablesAutomaticAlignment = 1;
disablesNiceNames = 1;
familyName = "flag Mono";
features = (
{
code = "sub f' l a g by ampersand;\012sub ampersand l' a g by quotesingle;\012sub ampersand quotesingle a' g by parenleft;\012sub ampersand quotesingle parenleft g' by parenright asterisk plus equal t three O question bar t three;";
name = ss01;
},
{
code = "sub f' l a g by zero;\012sub zero l' a g by six;\012sub zero six a' g by dollar;\012sub zero six dollar g' by nine eight A ampersand g one;";
name = ss02;
},
{
code = "sub f' l a g by asterisk;\012sub asterisk l' a g by comma;\012sub asterisk comma a' g by question;\012sub asterisk comma question g' by x v nine O dollar;";
name = ss03;
},
{
code = "sub f' l a g by hyphen;\012sub hyphen l' a g by s;\012sub hyphen s a' g by r;\012sub hyphen s r g' by t B three w three Q;";
name = ss04;
}
);
fontMaster = (
{
ascender = 1900;
capHeight = 1420;
customParameters = (
{
name = typoAscender;
value = 1900;
},
{
name = typoDescender;
value = -480;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 2226;
},
{
name = winDescent;
value = 480;
},
{
name = hheaAscender;
value = 1900;
},
{
name = hheaDescender;
value = -480;
},
{
name = strikeoutPosition;
value = 636;
},
{
name = strikeoutSize;
value = 100;
},
{
name = "Prep Table Assembly";
value = "NPUSHB[ ]	/* 255 values pushed */\012158 52 146 85 143 69 255 31 142 68 255 31 141 67 255 31 140 65 255 31 139 65 147 31 138 66 255 31 137 66 128 31 136 64 255 31 135 62 64 31 134 62 205 31 133 62 255 31 132 62 205 31 131 63 147 31 130 63 255 31 129 58 255 31 128 58 205 31 127 58 79 31 126 61 255 31 125 59 255 31 124 60 255 31 123 57 255 31 122 55 255 31 121 56 255 31 120 54 255 31 119 53 171 31 118 53 255 31 117 52 255 31 116 51 255 31 115 49 26 31 114 49 94 31 113 49 255 31 112 50 128 31 111 50 171 31 110 50 49 31 109 48 255 31 108 48 205 31 107 48 114 31 106 46 128 31 105 46 255 31 104 46 171 31 103 47 255 31 102 47 205 31 101 45 255 31 100 44 26 31 99 44 205 31 98 44 255 31 97 44 128 31 96 44 57 31 95 44 40 31 94 43 255 31 93 41 128 31 92 41 255 31 91 41 86 31 90 41 52 31 89 42 255 31 88 42 64 31 87 40 255 31 86 39 255 31 85 38 255 31 84 37 255 31 83 36 255 31 82 36 86 31 81 34 57 \012NPUSHB[ ]	/* 255 values pushed */\01231 80 34 255 31 79 34 57 31 78 33 255 31 77 30 255 31 76 32 255 31 75 31 255 31 74 29 205 31 73 29 255 31 72 29 103 31 71 28 61 31 70 28 255 31 68 67 94 31 67 65 128 31 66 65 64 31 63 62 47 31 61 58 47 31 60 59 114 31 59 58 32 31 56 55 49 31 50 49 20 31 48 46 45 31 47 46 74 31 46 5 27 25 92 45 27 15 31 44 26 255 31 43 26 10 31 42 41 29 31 41 25 255 31 40 25 6 31 39 38 171 31 38 35 74 31 37 36 128 31 36 35 171 31 35 15 24 22 92 34 24 21 31 33 23 7 31 32 171 30 85 31 30 12 31 30 23 255 31 29 22 255 31 28 22 6 31 27 56 25 44 91 24 58 22 64 91 26 56 25 44 91 23 58 22 64 91 21 25 66 22 203 90 19 52 18 85 17 52 16 85 18 89 16 89 13 52 12 85 5 52 4 85 12 89 4 89 15 57 14 85 11 52 10 85 7 52 6 85 1 52 0 85 14 89 10 89 6 89 0 89 9 52 8 85 3 52 2 85 8 89 2 89 16 0 \012PUSHB[ ]	/* 5 values pushed */\0123 64 64 5 1 \012PUSHW[ ]	/* 1 value pushed */\012400 \012PUSHB[ ]	/* 1 value pushed */\01284 \012CALL[ ]	/* CallFunction */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\0122047 \012GT[ ]	/* GreaterThan */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0128 \012LT[ ]	/* LessThan */\012OR[ ]	/* LogicalOr */\012PUSHB[ ]	/* 1 value pushed */\0121 \012GETINFO[ ]	/* GetInfo */\012PUSHB[ ]	/* 1 value pushed */\01237 \012GTEQ[ ]	/* GreaterThanOrEqual */\012PUSHB[ ]	/* 1 value pushed */\0121 \012GETINFO[ ]	/* GetInfo */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GETINFO[ ]	/* GetInfo */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012AND[ ]	/* LogicalAnd */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012SCANCTRL[ ]	/* ScanConversionControl */\012SCANTYPE[ ]	/* ScanType */\012SCANTYPE[ ]	/* ScanType */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012SCVTCI[ ]	/* SetCVTCutIn */\012WS[ ]	/* WriteStore */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\012144 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0123 0 0 \012SCVTCI[ ]	/* SetCVTCutIn */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RS[ ]	/* ReadStore */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 3 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012RTG[ ]	/* RoundToGrid */";
},
{
name = "Fpgm Table Assembly";
value = "NPUSHB[ ]	/* 74 values pushed */\012153 152 151 150 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 81 80 79 78 77 76 75 74 73 72 71 70 40 31 16 10 9 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01211 10 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012RS[ ]	/* ReadStore */\012NEG[ ]	/* Negate */\012SPVFS[ ]	/* SetPVectorFromStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01210 11 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012RS[ ]	/* ReadStore */\012SFVFS[ ]	/* SetFVectorFromStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012NEG[ ]	/* Negate */\012SPVFS[ ]	/* SetPVectorFromStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012WCVTP[ ]	/* WriteCVTInPixels */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012WCVTP[ ]	/* WriteCVTInPixels */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012SFVFS[ ]	/* SetFVectorFromStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012SWAP[ ]	/* SwapTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012SWAP[ ]	/* SwapTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01270 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01271 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01272 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01273 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0120 3 \012CINDEX[ ]	/* CopyXToTopStack */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 3 \012CINDEX[ ]	/* CopyXToTopStack */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MAX[ ]	/* Maximum */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01279 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01298 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 0 \012GPV[ ]	/* GetPVector */\012POP[ ]	/* PopTopStack */\012EQ[ ]	/* Equal */\012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01212 0 \012GPV[ ]	/* GetPVector */\012POP[ ]	/* PopTopStack */\012EQ[ ]	/* Equal */\012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012DIV[ ]	/* Divide */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012EVEN[ ]	/* Even */\012SWAP[ ]	/* SwapTopStack */\012PUSHW[ ]	/* 1 value pushed */\012256 \012DIV[ ]	/* Divide */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012EVEN[ ]	/* Even */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012EIF[ ]	/* EndIf */\012SCFS[ ]	/* SetCoordFromStackFP */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GTEQ[ ]	/* GreaterThanOrEqual */\012PUSHW[ ]	/* 1 value pushed */\01253 \012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 1 value pushed */\012-63 \012JMPR[ ]	/* Jump */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01235 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012PUSHB[ ]	/* 2 values pushed */\01264 1 \012GETINFO[ ]	/* GetInfo */\012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012PUSHB[ ]	/* 1 value pushed */\01232 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 1 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0128192 \012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 2 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 32 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 8 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 1 value pushed */\01216384 \012PUSHB[ ]	/* 1 value pushed */\012128 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 4 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 1 value pushed */\01216384 \012PUSHB[ ]	/* 1 value pushed */\012128 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\012256 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 8 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 2 values pushed */\01216384 256 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\012512 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 16 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01238 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\01216384 512 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 64 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 2 values pushed */\01216384 1024 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0122048 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0122 128 2 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01240 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\01216384 2048 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012GETINFO[ ]	/* GetInfo */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0122 256 \012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 10 values pushed */\0125 64 8 64 9 64 12 2 13 2 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 2 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0125 64 8 \012PUSHW[ ]	/* 3 values pushed */\012256 9 256 \012PUSHB[ ]	/* 4 values pushed */\01212 1 13 1 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\012128 2 \012RS[ ]	/* ReadStore */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0125 64 8 \012PUSHW[ ]	/* 1 value pushed */\012384 \012PUSHB[ ]	/* 2 values pushed */\0129 64 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 1 value pushed */\012256 \012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0125 64 8 \012PUSHW[ ]	/* 3 values pushed */\012384 9 320 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 1 value pushed */\012384 \012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 3 values pushed */\0125 64 8 \012PUSHW[ ]	/* 1 value pushed */\012512 \012PUSHB[ ]	/* 2 values pushed */\0129 64 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 3 values pushed */\0125 64 8 \012PUSHW[ ]	/* 3 values pushed */\012256 9 256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHW[ ]	/* 1 value pushed */\01216384 \012PUSHB[ ]	/* 1 value pushed */\012128 \012GETINFO[ ]	/* GetInfo */\012NEQ[ ]	/* NotEqual */\012PUSHW[ ]	/* 2 values pushed */\01216384 512 \012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012GETINFO[ ]	/* GetInfo */\012NEQ[ ]	/* NotEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\01212 0 13 1 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\01212 0 13 1 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01279 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012NEG[ ]	/* Negate */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01220 20 \012ROLL[ ]	/* RollTopThreeStack */\012WCVTF[ ]	/* WriteCVTInFUnits */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\01216 16 \012RS[ ]	/* ReadStore */\012MPPEM[ ]	/* MeasurePixelPerEm */\012ROLL[ ]	/* RollTopThreeStack */\012RS[ ]	/* ReadStore */\012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01279 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 2 values pushed */\01297 6 \012MINDEX[ ]	/* MoveXToTopStack */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MAX[ ]	/* Maximum */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01279 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01298 \012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0122 3 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 4 \012CINDEX[ ]	/* CopyXToTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[0]	/* MoveIndirectAbsPt */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0121 2 \012SPVTL[0]	/* SetPVectorToLine */\012GPV[ ]	/* GetPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012NEG[ ]	/* Negate */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0122 3 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 4 \012CINDEX[ ]	/* CopyXToTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[1]	/* MoveIndirectAbsPt */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[1]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0121 2 \012SPVTL[0]	/* SetPVectorToLine */\012GPV[ ]	/* GetPVector */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012NEG[ ]	/* Negate */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012RTG[ ]	/* RoundToGrid */\012ROUND[01]	/* Round */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012CEILING[ ]	/* Ceiling */\012ELSE[ ]	/* Else */\012FLOOR[ ]	/* Floor */\012EIF[ ]	/* EndIf */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0124 0 \012WS[ ]	/* WriteStore */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\0120 78 \012CALL[ ]	/* CallFunction */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012PUSHB[ ]	/* 2 values pushed */\01264 79 \012CALL[ ]	/* CallFunction */\012LT[ ]	/* LessThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\01264 4 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012WCVTP[ ]	/* WriteCVTInPixels */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012PUSHB[ ]	/* 2 values pushed */\01264 79 \012CALL[ ]	/* CallFunction */\012LT[ ]	/* LessThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SUB[ ]	/* Subtract */\012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GTEQ[ ]	/* GreaterThanOrEqual */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 2 values pushed */\01264 79 \012CALL[ ]	/* CallFunction */\012EQ[ ]	/* Equal */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012GPV[ ]	/* GetPVector */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01264 64 \012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SFVTCA[1]	/* SetFVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01211 10 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012RS[ ]	/* ReadStore */\012NEG[ ]	/* Negate */\012SPVFS[ ]	/* SetPVectorFromStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01210 11 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012RS[ ]	/* ReadStore */\012SFVFS[ ]	/* SetFVectorFromStack */\012SPVTCA[0]	/* SetPVectorToAxis */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\0128192 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\0128192 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012CEILING[ ]	/* Ceiling */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\0128192 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\0128192 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012MD[1]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012RCVT[ ]	/* ReadCVT */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012MD[1]	/* MeasureDistance */\012SWAP[ ]	/* SwapTopStack */\012RCVT[ ]	/* ReadCVT */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 2 values pushed */\0121 78 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\012103 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\012104 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012106 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012108 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SWAP[ ]	/* SwapTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SWAP[ ]	/* SwapTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\012128 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\012128 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012ROLL[ ]	/* RollTopThreeStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012110 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SWAP[ ]	/* SwapTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SWAP[ ]	/* SwapTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012128 \012LT[ ]	/* LessThan */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\0120 3 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ROLL[ ]	/* RollTopThreeStack */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0127 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012SUB[ ]	/* Subtract */\012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012112 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01232 \012SUB[ ]	/* Subtract */\012NEG[ ]	/* Negate */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SUB[ ]	/* Subtract */\012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\012512 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\012512 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01293 \012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP1[ ]	/* SetRefPoint1 */\012ROLL[ ]	/* RollTopThreeStack */\012SRP2[ ]	/* SetRefPoint2 */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012IP[ ]	/* InterpolatePts */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\01293 4096 \012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 2 values pushed */\0122 78 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012MSIRP[1]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHW[ ]	/* 2 values pushed */\01293 4096 \012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012109 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01293 7 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012111 \012CALL[ ]	/* CallFunction */\012PUSHW[ ]	/* 2 values pushed */\01293 4096 \012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01280 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012113 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012GT[ ]	/* GreaterThan */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHW[ ]	/* 2 values pushed */\01293 4096 \012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012110 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012109 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012109 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01280 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012113 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012113 \012CALL[ ]	/* CallFunction */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 1 value pushed */\012-64 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012113 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012113 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\012-64 \012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SDPVTL[1]	/* SetDualPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012101 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012104 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SPVTL[0]	/* SetPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012LTEQ[ ]	/* LessThenOrEqual */\012PUSHB[ ]	/* 2 values pushed */\0120 3 \012CINDEX[ ]	/* CopyXToTopStack */\012EQ[ ]	/* Equal */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SPVTL[1]	/* SetPVectorToLine */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01283 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SDPVTL[1]	/* SetDualPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SWAP[ ]	/* SwapTopStack */\012SCFS[ ]	/* SetCoordFromStackFP */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 3 values pushed */\0122 0 1 \012SFVTL[0]	/* SetFVectorToLine */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 3 values pushed */\0122 0 1 \012SFVTL[1]	/* SetFVectorToLine */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0122 1 \012SPVTL[1]	/* SetPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012GFV[ ]	/* GetFVector */\012GPV[ ]	/* GetPVector */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012PUSHW[ ]	/* 2 values pushed */\01216384 1024 \012MUL[ ]	/* Multiply */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[1]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[0]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[1]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[0]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[1]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[0]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012SFVTL[0]	/* SetFVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SFVTL[0]	/* SetFVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[1]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[0]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SFVTL[0]	/* SetFVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012SFVTL[0]	/* SetFVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SPVTCA[1]	/* SetPVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[1]	/* MeasureDistance */\012SPVTCA[0]	/* SetPVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\01293 14 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01212 \012MINDEX[ ]	/* MoveXToTopStack */\012SRP1[ ]	/* SetRefPoint1 */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012SRP2[ ]	/* SetRefPoint2 */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012IP[ ]	/* InterpolatePts */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012IP[ ]	/* InterpolatePts */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012124 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012124 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012SDPVTL[1]	/* SetDualPVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012MDRP[00001]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012MDRP[00001]	/* MoveDirectRelPt */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01211 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\012-1 \012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHW[ ]	/* 1 value pushed */\012-1 \012PUSHB[ ]	/* 1 value pushed */\012118 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012119 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012106 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012108 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012106 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012108 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01232 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 12 \012CINDEX[ ]	/* CopyXToTopStack */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[0]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[1]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01210 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012ROLL[ ]	/* RollTopThreeStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012PUSHB[ ]	/* 2 values pushed */\0121 7 \012MINDEX[ ]	/* MoveXToTopStack */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SFVTCA[0]	/* SetFVectorToAxis */\012ELSE[ ]	/* Else */\012SFVTCA[1]	/* SetFVectorToAxis */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SFVFS[ ]	/* SetFVectorFromStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SWAP[ ]	/* SwapTopStack */\012MSIRP[0]	/* MoveStackIndirRelPt */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0120 16384 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 1 value pushed */\01216384 \012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0120 16384 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 1 value pushed */\01216384 \012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\012125 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SFVTL[0]	/* SetFVectorToLine */\012GFV[ ]	/* GetFVector */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0120 16384 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 1 value pushed */\01216384 \012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\012125 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SFVTL[0]	/* SetFVectorToLine */\012PUSHB[ ]	/* 1 value pushed */\0121 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHW[ ]	/* 2 values pushed */\0120 16384 \012ELSE[ ]	/* Else */\012PUSHW[ ]	/* 1 value pushed */\01216384 \012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012GFV[ ]	/* GetFVector */\012PUSHB[ ]	/* 1 value pushed */\012125 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SFVTL[0]	/* SetFVectorToLine */\012GFV[ ]	/* GetFVector */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SFVTL[0]	/* SetFVectorToLine */\012GFV[ ]	/* GetFVector */\012PUSHB[ ]	/* 1 value pushed */\012125 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012RS[ ]	/* ReadStore */\012ROLL[ ]	/* RollTopThreeStack */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012SUB[ ]	/* Subtract */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012RDTG[ ]	/* RoundDownToGrid */\012MDRP[00101]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012106 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012108 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012106 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012108 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012RTG[ ]	/* RoundToGrid */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012111 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012102 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012104 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\012102 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\012104 \012EIF[ ]	/* EndIf */\012CALL[ ]	/* CallFunction */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012RDTG[ ]	/* RoundDownToGrid */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012MDRP[00101]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CINDEX[ ]	/* CopyXToTopStack */\012MDRP[00101]	/* MoveDirectRelPt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012111 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012RDTG[ ]	/* RoundDownToGrid */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012130 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012130 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROUND[01]	/* Round */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01296 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROUND[01]	/* Round */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01232 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012MINDEX[ ]	/* MoveXToTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROUND[01]	/* Round */\012SUB[ ]	/* Subtract */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SLOOP[ ]	/* SetLoopVariable */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012RTG[ ]	/* RoundToGrid */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GT[ ]	/* GreaterThan */\012PUSHB[ ]	/* 2 values pushed */\0121 2 \012RS[ ]	/* ReadStore */\012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012DUP[ ]	/* DuplicateTopStack */\012SVTCA[1]	/* SetFreedomAndProjectionVectorToAxis */\012ALIGNRP[ ]	/* AlignRelativePt */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012ALIGNRP[ ]	/* AlignRelativePt */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012IF[ ]	/* If */\012ALIGNRP[ ]	/* AlignRelativePt */\012ELSE[ ]	/* Else */\012IP[ ]	/* InterpolatePts */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHW[ ]	/* 1 value pushed */\012-23 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012EQ[ ]	/* Equal */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SRP1[ ]	/* SetRefPoint1 */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP2[ ]	/* SetRefPoint2 */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\012133 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012EQ[ ]	/* Equal */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP2[ ]	/* SetRefPoint2 */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012SRP0[ ]	/* SetRefPoint0 */\012SRP1[ ]	/* SetRefPoint1 */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0126 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012133 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\012133 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012GPV[ ]	/* GetPVector */\012SPVTCA[0]	/* SetPVectorToAxis */\012ROLL[ ]	/* RollTopThreeStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012SPVFS[ ]	/* SetPVectorFromStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SPVFS[ ]	/* SetPVectorFromStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012152 \012CALL[ ]	/* CallFunction */\012IF[ ]	/* If */\012GPV[ ]	/* GetPVector */\012SPVTCA[0]	/* SetPVectorToAxis */\012ROLL[ ]	/* RollTopThreeStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012SPVFS[ ]	/* SetPVectorFromStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SPVFS[ ]	/* SetPVectorFromStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012PUSHW[ ]	/* 1 value pushed */\012104 \012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012PUSHW[ ]	/* 1 value pushed */\01294 \012SWAP[ ]	/* SwapTopStack */\012JROF[ ]	/* JumpRelativeOnFalse */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012PUSHW[ ]	/* 1 value pushed */\01277 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 1 value pushed */\01248 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012PUSHW[ ]	/* 1 value pushed */\01229 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012PUSHW[ ]	/* 1 value pushed */\01212 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\012-85 \012JMPR[ ]	/* Jump */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012EQ[ ]	/* Equal */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012PUSHW[ ]	/* 1 value pushed */\012129 \012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012PUSHW[ ]	/* 1 value pushed */\012119 \012SWAP[ ]	/* SwapTopStack */\012JROF[ ]	/* JumpRelativeOnFalse */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RS[ ]	/* ReadStore */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHW[ ]	/* 1 value pushed */\012103 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012IF[ ]	/* If */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012ODD[ ]	/* Odd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012OR[ ]	/* LogicalOr */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHW[ ]	/* 1 value pushed */\01256 \012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012ROLL[ ]	/* RollTopThreeStack */\012NOT[ ]	/* LogicalNot */\012ROLL[ ]	/* RollTopThreeStack */\012AND[ ]	/* LogicalAnd */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHW[ ]	/* 1 value pushed */\01230 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012NOT[ ]	/* LogicalNot */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012PUSHW[ ]	/* 1 value pushed */\01214 \012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\012-109 \012JMPR[ ]	/* Jump */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
1500,
20,
1420,
20,
1420,
20,
1060,
20,
0,
-20,
0,
-20,
0,
-20,
-460,
-18,
1420,
20,
0,
-20,
0,
210,
207,
190,
190,
212,
188,
188,
13,
209,
188,
95,
-4,
340,
140,
194,
188,
195,
208,
214,
12,
212,
176,
80,
186,
117,
190,
176,
213,
212,
159,
336,
18,
184,
154,
213,
192,
3,
213,
181,
172,
192,
185,
163,
380,
184,
167,
192,
203,
229,
12,
30,
199,
208,
214,
95,
183,
190,
340,
122,
140,
158,
176,
187,
196,
208,
215,
12,
160,
176,
192,
200,
212,
220,
80,
161,
170,
180,
188,
194,
226,
117,
171,
177,
185,
191,
199,
204,
208,
213,
138,
154,
168,
211,
222,
252,
336,
18,
184,
190,
154,
192,
214,
3,
171,
181,
193,
202,
209,
216,
163,
170,
180,
185,
190,
201,
380,
159,
167,
175,
182,
193,
204,
229,
0,
800,
790,
802,
1052,
1730,
1176,
810,
1610,
1634,
1620,
2226,
1900,
-480,
-20,
691,
1200
);
}
);
descender = -480;
id = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
weightValue = 400;
widthValue = 5;
xHeight = 1060;
}
);
glyphs = (
{
glyphname = .notdef;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
width = 1200;
}
);
note = .notdef;
},
{
glyphname = exclam;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"614 980 LINE SMOOTH",
"614 1330 OFFCURVE",
"898 1330 QCURVE SMOOTH",
"943 1330 OFFCURVE",
"1039 1324 OFFCURVE",
"1102 1316 QCURVE",
"1124 1500 LINE",
"1018 1520 OFFCURVE",
"904 1520 QCURVE SMOOTH",
"402 1520 OFFCURVE",
"402 970 QCURVE SMOOTH",
"402 0 LINE",
"614 0 LINE"
);
},
{
closed = 1;
nodes = (
"1048 826 LINE",
"68 826 LINE",
"68 640 LINE",
"1048 640 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\01213 14 106 13 13 0 3 9 106 3 1 114 0 10 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0021;
unicode = 0021;
},
{
glyphname = quotedbl;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"282 1610 LINE",
"70 1610 LINE",
"874 -190 LINE",
"1086 -190 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0121 0 106 1 152 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0022;
unicode = 0022;
},
{
glyphname = numbersign;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"907 -218 QCURVE",
"907 -38 LINE",
"835 -63 OFFCURVE",
"710 -63 QCURVE SMOOTH",
"482 -63 OFFCURVE",
"276 250 OFFCURVE",
"276 598 QCURVE SMOOTH",
"276 1259 OFFCURVE",
"620 1259 QCURVE SMOOTH",
"900 1259 OFFCURVE",
"900 887 QCURVE SMOOTH",
"900 799 OFFCURVE",
"900 631 OFFCURVE",
"900 524 QCURVE",
"1072 524 LINE",
"1072 633 OFFCURVE",
"1072 803 OFFCURVE",
"1072 893 QCURVE SMOOTH",
"1072 1439 OFFCURVE",
"620 1439 QCURVE SMOOTH",
"108 1439 OFFCURVE",
"108 598 QCURVE SMOOTH",
"108 303 OFFCURVE",
"233 -68 OFFCURVE",
"499 -243 OFFCURVE",
"710 -243 QCURVE SMOOTH",
"828 -243 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"870 269 OFFCURVE",
"888 380 QCURVE",
"962 380 LINE",
"962 857 LINE",
"888 857 LINE",
"866 968 OFFCURVE",
"755 1089 OFFCURVE",
"678 1089 QCURVE SMOOTH",
"543 1089 OFFCURVE",
"396 856 OFFCURVE",
"396 619 QCURVE SMOOTH",
"396 395 OFFCURVE",
"543 148 OFFCURVE",
"676 148 QCURVE SMOOTH",
"759 148 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"576 485 OFFCURVE",
"576 619 QCURVE SMOOTH",
"576 765 OFFCURVE",
"666 899 OFFCURVE",
"748 899 QCURVE SMOOTH",
"822 899 OFFCURVE",
"900 742 OFFCURVE",
"900 570 QCURVE SMOOTH",
"900 459 OFFCURVE",
"814 338 OFFCURVE",
"734 338 QCURVE SMOOTH",
"659 338 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1072 769 LINE",
"900 769 LINE",
"900 168 LINE",
"1072 168 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01233 48 106 27 42 106 27 54 38 11 45 56 36 33 8 6 0 22 106 6 0 105 6 17 106 6 3 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0023;
unicode = 0023;
},
{
glyphname = dollar;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"774 -459 OFFCURVE",
"1032 -189 OFFCURVE",
"1032 94 QCURVE SMOOTH",
"1032 1060 LINE",
"840 1060 LINE",
"820 836 LINE",
"820 62 LINE SMOOTH",
"819 -101 OFFCURVE",
"673 -269 OFFCURVE",
"512 -274 QCURVE SMOOTH",
"172 -284 LINE",
"182 -478 LINE",
"492 -468 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"790 92 OFFCURVE",
"800 192 QCURVE",
"892 192 LINE",
"820 494 LINE",
"820 330 OFFCURVE",
"691 160 OFFCURVE",
"566 160 QCURVE SMOOTH",
"438 160 OFFCURVE",
"306 342 OFFCURVE",
"306 520 QCURVE SMOOTH",
"306 708 OFFCURVE",
"438 900 OFFCURVE",
"566 900 QCURVE SMOOTH",
"691 900 OFFCURVE",
"820 730 OFFCURVE",
"820 566 QCURVE",
"892 868 LINE",
"810 868 LINE",
"797 968 OFFCURVE",
"643 1080 OFFCURVE",
"519 1080 QCURVE SMOOTH",
"311 1080 OFFCURVE",
"96 796 OFFCURVE",
"96 520 QCURVE SMOOTH",
"96 254 OFFCURVE",
"311 -20 OFFCURVE",
"519 -20 QCURVE SMOOTH",
"641 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01238 36 24 6 22 5 13 19 27 106 19 7 114 13 33 106 13 11 114 8 6 114 0 1 106 0 15 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0024;
unicode = 0024;
},
{
glyphname = percent;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"748 871 OFFCURVE",
"748 932 QCURVE SMOOTH",
"748 994 OFFCURVE",
"662 1080 OFFCURVE",
"600 1080 QCURVE SMOOTH",
"539 1080 OFFCURVE",
"452 994 OFFCURVE",
"452 932 QCURVE SMOOTH",
"452 871 OFFCURVE",
"539 784 OFFCURVE",
"600 784 QCURVE SMOOTH",
"662 784 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"748 67 OFFCURVE",
"748 128 QCURVE SMOOTH",
"748 190 OFFCURVE",
"662 276 OFFCURVE",
"600 276 QCURVE SMOOTH",
"539 276 OFFCURVE",
"452 190 OFFCURVE",
"452 128 QCURVE SMOOTH",
"452 67 OFFCURVE",
"539 -20 OFFCURVE",
"600 -20 QCURVE SMOOTH",
"662 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01212 18 106 12 19 114 6 0 106 6 7 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0025;
unicode = 0025;
},
{
glyphname = ampersand;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1057 173 OFFCURVE",
"1057 366 QCURVE SMOOTH",
"1057 512 OFFCURVE",
"893 698 OFFCURVE",
"735 772 QCURVE SMOOTH",
"527 870 LINE SMOOTH",
"455 904 OFFCURVE",
"381 991 OFFCURVE",
"381 1060 QCURVE SMOOTH",
"381 1157 OFFCURVE",
"494 1256 OFFCURVE",
"597 1256 QCURVE SMOOTH",
"680 1256 OFFCURVE",
"833 1191 OFFCURVE",
"921 1119 QCURVE",
"1061 1261 LINE",
"959 1356 OFFCURVE",
"739 1440 OFFCURVE",
"596 1440 QCURVE SMOOTH",
"391 1440 OFFCURVE",
"167 1236 OFFCURVE",
"167 1050 QCURVE SMOOTH",
"167 912 OFFCURVE",
"322 726 OFFCURVE",
"467 660 QCURVE SMOOTH",
"713 548 LINE SMOOTH",
"843 489 OFFCURVE",
"843 362 QCURVE SMOOTH",
"843 262 OFFCURVE",
"707 164 OFFCURVE",
"567 164 QCURVE SMOOTH",
"470 164 OFFCURVE",
"265 213 OFFCURVE",
"155 260 QCURVE",
"129 58 LINE",
"219 19 OFFCURVE",
"430 -20 OFFCURVE",
"551 -20 QCURVE SMOOTH",
"806 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01210 36 12 13 33 32 16 29 23 9 0 19 26 106 19 3 114 0 7 106 0 9 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0026;
unicode = 0026;
},
{
glyphname = quotesingle;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"368 1420 LINE",
"160 1420 LINE",
"160 0 LINE",
"368 0 LINE"
);
},
{
closed = 1;
nodes = (
"1100 190 LINE",
"160 190 LINE",
"160 0 LINE",
"1100 0 LINE"
);
},
{
closed = 1;
nodes = (
"920 806 LINE",
"160 806 LINE",
"160 616 LINE",
"920 616 LINE"
);
},
{
closed = 1;
nodes = (
"1100 1420 LINE",
"160 1420 LINE",
"160 1230 LINE",
"1100 1230 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0124 5 106 4 0 8 9 106 8 8 0 1 13 12 106 13 1 2 114 0 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0027;
unicode = 0027;
},
{
glyphname = parenleft;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"774 610 OFFCURVE",
"984 883 OFFCURVE",
"1094 1231 OFFCURVE",
"1094 1420 QCURVE",
"888 1420 LINE",
"888 1273 OFFCURVE",
"817 998 OFFCURVE",
"672 779 OFFCURVE",
"448 650 OFFCURVE",
"294 650 QCURVE",
"276 452 LINE",
"470 452 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"358 1420 LINE",
"150 1420 LINE",
"150 0 LINE",
"358 0 LINE"
);
},
{
closed = 1;
nodes = (
"740 794 LINE",
"560 692 LINE",
"920 0 LINE",
"1162 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\0120 1 106 18 17 13 0 0 12 6 13 2 114 16 12 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0028;
unicode = 0028;
},
{
glyphname = parenright;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"591 1248 LINE",
"609 1248 LINE",
"945 0 LINE",
"1155 0 LINE",
"745 1420 LINE",
"455 1420 LINE",
"45 0 LINE",
"255 0 LINE"
);
},
{
closed = 1;
nodes = (
"955 536 LINE",
"235 536 LINE",
"235 346 LINE",
"955 346 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\0128 9 106 8 8 0 5 4 1 2 114 4 0 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0029;
unicode = 0029;
},
{
glyphname = asterisk;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"703 1420 LINE",
"495 1420 LINE",
"495 0 LINE",
"703 0 LINE"
);
},
{
closed = 1;
nodes = (
"1032 190 LINE",
"168 190 LINE",
"168 0 LINE",
"1032 0 LINE"
);
},
{
closed = 1;
nodes = (
"1032 1420 LINE",
"168 1420 LINE",
"168 1230 LINE",
"1032 1230 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 4 1 9 4 5 106 9 8 106 9 2 114 4 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni002A;
unicode = 002A;
},
{
glyphname = plus;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"953 -203 OFFCURVE",
"986 -194 QCURVE",
"962 -20 LINE",
"927 -24 OFFCURVE",
"862 -30 OFFCURVE",
"834 -30 QCURVE SMOOTH",
"763 -30 OFFCURVE",
"672 68 OFFCURVE",
"688 156 QCURVE SMOOTH",
"698 213 OFFCURVE",
"739 319 OFFCURVE",
"774 428 OFFCURVE",
"774 488 QCURVE SMOOTH",
"774 580 OFFCURVE",
"615 687 OFFCURVE",
"472 689 QCURVE",
"472 723 LINE",
"615 725 OFFCURVE",
"774 839 OFFCURVE",
"774 942 QCURVE SMOOTH",
"774 1000 OFFCURVE",
"739 1107 OFFCURVE",
"698 1215 OFFCURVE",
"688 1274 QCURVE SMOOTH",
"675 1354 OFFCURVE",
"763 1442 OFFCURVE",
"834 1442 QCURVE SMOOTH",
"862 1442 OFFCURVE",
"927 1437 OFFCURVE",
"962 1432 QCURVE",
"986 1606 LINE",
"953 1615 OFFCURVE",
"875 1626 OFFCURVE",
"816 1626 QCURVE SMOOTH",
"708 1626 OFFCURVE",
"538 1542 OFFCURVE",
"454 1385 OFFCURVE",
"474 1274 QCURVE SMOOTH",
"484 1217 OFFCURVE",
"523 1109 OFFCURVE",
"556 999 OFFCURVE",
"556 938 QCURVE SMOOTH",
"556 901 OFFCURVE",
"491 844 OFFCURVE",
"391 805 OFFCURVE",
"286 785 OFFCURVE",
"246 785 QCURVE",
"246 627 LINE",
"287 627 OFFCURVE",
"393 614 OFFCURVE",
"492 584 OFFCURVE",
"556 531 OFFCURVE",
"556 492 QCURVE SMOOTH",
"556 434 OFFCURVE",
"523 323 OFFCURVE",
"484 214 OFFCURVE",
"474 156 QCURVE SMOOTH",
"454 41 OFFCURVE",
"538 -125 OFFCURVE",
"708 -214 OFFCURVE",
"816 -214 QCURVE SMOOTH",
"875 -214 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01244 45 13 14 106 13 13 27 0 55 106 27 0 105 27 34 106 27 154 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni002B;
unicode = 002B;
},
{
glyphname = comma;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1044 135 OFFCURVE",
"1044 306 QCURVE SMOOTH",
"1044 434 OFFCURVE",
"889 568 OFFCURVE",
"722 608 QCURVE SMOOTH",
"526 656 LINE SMOOTH",
"458 673 OFFCURVE",
"392 714 OFFCURVE",
"392 760 QCURVE SMOOTH",
"392 829 OFFCURVE",
"552 890 OFFCURVE",
"730 890 QCURVE SMOOTH",
"789 890 OFFCURVE",
"913 884 OFFCURVE",
"994 876 QCURVE",
"1016 1060 LINE",
"946 1071 OFFCURVE",
"813 1080 OFFCURVE",
"736 1080 QCURVE SMOOTH",
"439 1080 OFFCURVE",
"172 924 OFFCURVE",
"172 750 QCURVE SMOOTH",
"172 630 OFFCURVE",
"319 512 OFFCURVE",
"476 472 QCURVE SMOOTH",
"720 410 LINE SMOOTH",
"773 397 OFFCURVE",
"824 350 OFFCURVE",
"824 302 QCURVE SMOOTH",
"824 233 OFFCURVE",
"679 170 OFFCURVE",
"518 170 QCURVE SMOOTH",
"446 170 OFFCURVE",
"285 186 OFFCURVE",
"180 202 QCURVE",
"156 10 LINE",
"227 -6 OFFCURVE",
"398 -20 OFFCURVE",
"518 -20 QCURVE SMOOTH",
"794 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01210 37 13 14 34 33 17 30 8 0 20 27 106 20 7 114 0 7 106 0 11 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni002C;
unicode = 002C;
},
{
glyphname = hyphen;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1114 48 QCURVE",
"1068 224 LINE",
"927 164 OFFCURVE",
"782 164 QCURVE SMOOTH",
"300 164 OFFCURVE",
"300 722 QCURVE SMOOTH",
"300 978 OFFCURVE",
"533 1256 OFFCURVE",
"726 1256 QCURVE SMOOTH",
"807 1256 OFFCURVE",
"946 1182 OFFCURVE",
"991 1114 QCURVE",
"1139 1261 LINE",
"1089 1347 OFFCURVE",
"871 1440 OFFCURVE",
"724 1440 QCURVE SMOOTH",
"420 1440 OFFCURVE",
"86 1059 OFFCURVE",
"86 712 QCURVE SMOOTH",
"86 -20 OFFCURVE",
"748 -20 QCURVE SMOOTH",
"940 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\0128 9 0 5 12 106 5 3 114 0 17 106 0 9 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni002D;
unicode = 002D;
},
{
glyphname = period;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"849 540 OFFCURVE",
"1090 776 OFFCURVE",
"1090 990 QCURVE SMOOTH",
"1090 1196 OFFCURVE",
"849 1420 OFFCURVE",
"628 1420 QCURVE SMOOTH",
"314 1420 LINE",
"338 1230 LINE",
"628 1230 LINE SMOOTH",
"747 1230 OFFCURVE",
"880 1095 OFFCURVE",
"880 970 QCURVE SMOOTH",
"880 856 OFFCURVE",
"747 730 OFFCURVE",
"628 730 QCURVE SMOOTH",
"334 730 LINE",
"334 540 LINE",
"628 540 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"348 1420 LINE",
"140 1420 LINE",
"140 0 LINE",
"348 0 LINE"
);
},
{
closed = 1;
nodes = (
"804 668 LINE",
"584 668 LINE",
"902 0 LINE",
"1142 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01210 9 106 10 19 23 0 1 106 0 0 18 19 2 114 22 18 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IP[ ]	/* InterpolatePts */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni002E;
unicode = 002E;
},
{
glyphname = slash;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"490 1340 LINE",
"274 1340 LINE",
"74 318 LINE",
"288 318 LINE"
);
},
{
closed = 1;
nodes = (
"798 504 LINE",
"214 504 LINE",
"74 318 LINE",
"798 318 LINE"
);
},
{
closed = 1;
nodes = (
"1120 504 LINE",
"966 504 LINE",
"966 318 LINE",
"1120 318 LINE"
);
},
{
closed = 1;
nodes = (
"986 1420 LINE",
"778 1420 LINE",
"778 0 LINE",
"986 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0125 8 9 106 7 3 8 8 14 15 12 114 1 14 4 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012SHP[1]	/* ShiftPointByLastPoint */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni002F;
unicode = 002F;
},
{
glyphname = zero;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"846 1168 LINE",
"904 1168 LINE",
"904 1420 LINE",
"762 1420 LINE",
"608 810 LINE",
"596 810 LINE",
"566 580 LINE",
"692 580 LINE"
);
},
{
closed = 1;
nodes = (
"328 1420 LINE",
"128 1420 LINE",
"128 0 LINE",
"328 0 LINE"
);
},
{
closed = 1;
nodes = (
"600 810 LINE",
"592 810 LINE",
"438 1420 LINE",
"296 1420 LINE",
"296 1168 LINE",
"354 1168 LINE",
"508 580 LINE",
"620 580 LINE"
);
},
{
closed = 1;
nodes = (
"1072 1420 LINE",
"872 1420 LINE",
"872 0 LINE",
"1072 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0125 9 14 106 17 12 1 106 0 12 12 20 21 15 3 9 2 114 20 8 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SHP[0]	/* ShiftPointByLastPoint */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP1[ ]	/* SetRefPoint1 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0030;
unicode = 0030;
},
{
glyphname = one;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"910 0 OFFCURVE",
"1134 204 OFFCURVE",
"1134 390 QCURVE SMOOTH",
"1134 560 OFFCURVE",
"898 746 OFFCURVE",
"682 746 QCURVE SMOOTH",
"334 746 LINE",
"358 655 LINE",
"632 655 LINE SMOOTH",
"772 655 OFFCURVE",
"924 532 OFFCURVE",
"924 420 QCURVE SMOOTH",
"924 311 OFFCURVE",
"778 190 OFFCURVE",
"646 190 QCURVE SMOOTH",
"354 190 LINE",
"354 0 LINE",
"704 0 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"368 1420 LINE",
"160 1420 LINE",
"160 0 LINE",
"368 0 LINE"
);
},
{
closed = 1;
nodes = (
"694 796 LINE",
"286 796 LINE",
"286 698 LINE",
"694 698 LINE"
);
},
{
closed = 1;
nodes = (
"810 754 OFFCURVE",
"1034 913 OFFCURVE",
"1034 1060 QCURVE SMOOTH",
"1034 1233 OFFCURVE",
"798 1420 OFFCURVE",
"582 1420 QCURVE SMOOTH",
"334 1420 LINE",
"358 1230 LINE",
"572 1230 LINE SMOOTH",
"693 1230 OFFCURVE",
"824 1132 OFFCURVE",
"824 1040 QCURVE SMOOTH",
"824 946 OFFCURVE",
"699 845 OFFCURVE",
"586 845 QCURVE SMOOTH",
"354 845 LINE",
"354 754 LINE",
"604 754 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01236 35 106 36 19 26 10 22 3 9 27 105 23 9 9 18 19 2 114 0 1 106 0 18 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0031;
unicode = 0031;
},
{
glyphname = two;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"368 1420 LINE",
"160 1420 LINE",
"160 0 LINE",
"368 0 LINE"
);
},
{
closed = 1;
nodes = (
"1100 190 LINE",
"160 190 LINE",
"160 0 LINE",
"1100 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\0124 5 106 4 0 1 2 114 0 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0032;
unicode = 0032;
},
{
glyphname = three;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"908 -10 OFFCURVE",
"1002 8 QCURVE",
"976 194 LINE",
"910 181 OFFCURVE",
"782 166 OFFCURVE",
"716 166 QCURVE SMOOTH",
"527 166 OFFCURVE",
"322 358 OFFCURVE",
"322 542 QCURVE SMOOTH",
"322 710 OFFCURVE",
"471 894 OFFCURVE",
"606 894 QCURVE SMOOTH",
"726 894 OFFCURVE",
"862 741 OFFCURVE",
"862 598 QCURVE",
"304 598 LINE",
"304 436 LINE",
"1048 436 LINE",
"1054 499 OFFCURVE",
"1054 572 QCURVE SMOOTH",
"1054 820 OFFCURVE",
"819 1080 OFFCURVE",
"604 1080 QCURVE SMOOTH",
"376 1080 OFFCURVE",
"126 792 OFFCURVE",
"126 532 QCURVE SMOOTH",
"126 265 OFFCURVE",
"421 -20 OFFCURVE",
"692 -20 QCURVE SMOOTH",
"752 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01213 12 106 13 13 0 6 17 106 6 7 114 27 0 23 106 0 11 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0033;
unicode = 0033;
},
{
glyphname = four;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1134 0 OFFCURVE",
"1134 690 QCURVE SMOOTH",
"1134 1420 OFFCURVE",
"484 1420 QCURVE SMOOTH",
"314 1420 LINE",
"338 1230 LINE",
"484 1230 LINE SMOOTH",
"703 1230 OFFCURVE",
"924 961 OFFCURVE",
"924 690 QCURVE SMOOTH",
"924 440 OFFCURVE",
"703 190 OFFCURVE",
"484 190 QCURVE SMOOTH",
"334 190 LINE",
"334 0 LINE",
"484 0 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"348 1420 LINE",
"140 1420 LINE",
"140 0 LINE",
"348 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\0120 1 106 0 16 10 9 106 10 17 2 114 16 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0034;
unicode = 0034;
},
{
glyphname = five;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1100 0 LINE",
"100 0 LINE",
"100 -186 LINE",
"1100 -186 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0121 0 106 1 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0035;
unicode = 0035;
},
{
glyphname = six;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1158 170 LINE",
"978 192 LINE",
"978 634 LINE SMOOTH",
"978 844 OFFCURVE",
"723 1063 OFFCURVE",
"460 1067 QCURVE SMOOTH",
"246 1070 LINE",
"226 882 LINE",
"480 875 LINE SMOOTH",
"627 871 OFFCURVE",
"776 772 OFFCURVE",
"776 666 QCURVE SMOOTH",
"776 392 LINE",
"804 304 LINE",
"818 -10 LINE",
"1158 0 LINE"
);
},
{
closed = 1;
nodes = (
"703 41 OFFCURVE",
"788 164 OFFCURVE",
"788 256 QCURVE",
"754 224 LINE",
"838 224 LINE",
"776 496 LINE",
"776 380 LINE SMOOTH",
"776 324 OFFCURVE",
"710 218 OFFCURVE",
"577 150 OFFCURVE",
"478 150 QCURVE SMOOTH",
"391 150 OFFCURVE",
"296 226 OFFCURVE",
"296 296 QCURVE SMOOTH",
"296 464 OFFCURVE",
"572 464 QCURVE SMOOTH",
"639 464 OFFCURVE",
"767 459 OFFCURVE",
"834 444 QCURVE",
"878 588 LINE",
"820 611 OFFCURVE",
"671 634 OFFCURVE",
"576 634 QCURVE SMOOTH",
"347 634 OFFCURVE",
"96 454 OFFCURVE",
"96 286 QCURVE SMOOTH",
"96 140 OFFCURVE",
"278 -20 OFFCURVE",
"444 -20 QCURVE SMOOTH",
"549 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01222 29 106 41 42 1 39 22 5 8 16 34 106 16 11 114 15 13 106 15 10 8 7 106 8 7 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012MIAP[1]	/* MoveIndirectAbsPt */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0036;
unicode = 0036;
},
{
glyphname = seven;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"981 92 OFFCURVE",
"1094 306 OFFCURVE",
"1094 458 QCURVE SMOOTH",
"1094 682 OFFCURVE",
"868 926 OFFCURVE",
"662 926 QCURVE SMOOTH",
"583 926 OFFCURVE",
"427 895 OFFCURVE",
"348 850 QCURVE",
"330 680 LINE",
"452 746 OFFCURVE",
"592 746 QCURVE SMOOTH",
"732 746 OFFCURVE",
"884 595 OFFCURVE",
"884 458 QCURVE SMOOTH",
"884 318 OFFCURVE",
"744 164 OFFCURVE",
"616 164 QCURVE SMOOTH",
"486 164 OFFCURVE",
"346 287 OFFCURVE",
"346 398 QCURVE",
"132 398 LINE",
"132 199 OFFCURVE",
"384 -20 OFFCURVE",
"614 -20 QCURVE SMOOTH",
"767 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"432 804 LINE",
"452 1420 LINE",
"238 1420 LINE",
"218 680 LINE",
"330 680 LINE"
);
},
{
closed = 1;
nodes = (
"1004 1420 LINE",
"316 1420 LINE",
"334 1234 LINE",
"1004 1234 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01216 15 19 26 105 19 13 106 19 4 0 33 34 106 27 33 4 114 0 7 106 0 13 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0037;
unicode = 0037;
},
{
glyphname = eight;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"960 -8 OFFCURVE",
"1042 10 QCURVE",
"1018 196 LINE",
"948 184 OFFCURVE",
"800 170 OFFCURVE",
"726 170 QCURVE SMOOTH",
"545 170 OFFCURVE",
"350 361 OFFCURVE",
"350 542 QCURVE SMOOTH",
"350 709 OFFCURVE",
"516 890 OFFCURVE",
"666 890 QCURVE SMOOTH",
"749 890 OFFCURVE",
"889 810 OFFCURVE",
"934 737 QCURVE",
"1097 860 LINE",
"1050 965 OFFCURVE",
"829 1080 OFFCURVE",
"674 1080 QCURVE SMOOTH",
"415 1080 OFFCURVE",
"136 792 OFFCURVE",
"136 532 QCURVE SMOOTH",
"136 265 OFFCURVE",
"431 -20 OFFCURVE",
"702 -20 QCURVE SMOOTH",
"785 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\0129 10 0 6 13 106 6 7 114 0 19 106 0 11 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0038;
unicode = 0038;
},
{
glyphname = nine;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"776 1000 LINE",
"564 1000 LINE",
"564 0 LINE",
"776 0 LINE"
);
},
{
closed = 1;
nodes = (
"584 186 LINE",
"160 186 LINE",
"160 0 LINE",
"584 0 LINE"
);
},
{
closed = 1;
nodes = (
"1102 186 LINE",
"756 186 LINE",
"756 0 LINE",
"1102 0 LINE"
);
},
{
closed = 1;
nodes = (
"776 1060 LINE",
"220 1060 LINE",
"220 874 LINE",
"776 874 LINE"
);
},
{
closed = 1;
nodes = (
"811 1315 OFFCURVE",
"811 1376 QCURVE SMOOTH",
"811 1438 OFFCURVE",
"725 1524 OFFCURVE",
"663 1524 QCURVE SMOOTH",
"602 1524 OFFCURVE",
"515 1438 OFFCURVE",
"515 1376 QCURVE SMOOTH",
"515 1315 OFFCURVE",
"602 1228 OFFCURVE",
"663 1228 QCURVE SMOOTH",
"725 1228 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01216 22 106 13 16 105 1 13 12 106 13 6 114 9 4 5 106 8 0 4 10 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0039;
unicode = 0039;
},
{
glyphname = colon;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"734 1420 LINE",
"526 1420 LINE",
"526 0 LINE",
"734 0 LINE"
);
},
{
closed = 1;
nodes = (
"546 190 LINE",
"170 190 LINE",
"170 0 LINE",
"546 0 LINE"
);
},
{
closed = 1;
nodes = (
"1052 190 LINE",
"714 190 LINE",
"714 0 LINE",
"1052 0 LINE"
);
},
{
closed = 1;
nodes = (
"526 1420 LINE",
"190 1300 LINE",
"190 1098 LINE",
"526 1214 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\01213 12 106 13 4 14 15 106 1 14 4 114 9 4 5 106 8 0 4 12 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni003A;
unicode = 003A;
},
{
glyphname = semicolon;
lastChange = "2022-05-01 05:10:56 +0000";
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1100 802 LINE",
"100 802 LINE",
"100 616 LINE",
"1100 616 LINE"
);
}
);
width = 1200;
}
);
note = uni003B;
unicode = 003B;
},
{
glyphname = less;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"388 1420 LINE",
"180 1420 LINE",
"180 0 LINE",
"388 0 LINE"
);
},
{
closed = 1;
nodes = (
"940 746 LINE",
"180 746 LINE",
"180 556 LINE",
"940 556 LINE"
);
},
{
closed = 1;
nodes = (
"1120 1420 LINE",
"180 1420 LINE",
"180 1230 LINE",
"1120 1230 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\0124 5 106 4 4 0 1 9 8 106 9 1 2 114 0 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni003C;
unicode = 003C;
},
{
glyphname = equal;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1124 700 QCURVE SMOOTH",
"1124 1440 OFFCURVE",
"600 1440 QCURVE SMOOTH",
"76 1440 OFFCURVE",
"76 700 QCURVE SMOOTH",
"76 -20 OFFCURVE",
"600 -20 QCURVE SMOOTH",
"1124 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"290 700 QCURVE SMOOTH",
"290 1256 OFFCURVE",
"600 1256 QCURVE SMOOTH",
"910 1256 OFFCURVE",
"910 700 QCURVE SMOOTH",
"910 164 OFFCURVE",
"600 164 QCURVE SMOOTH",
"290 164 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\0120 8 106 4 12 106 4 3 114 0 9 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni003D;
unicode = 003D;
},
{
glyphname = greater;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"874 340 LINE",
"824 340 LINE",
"416 1420 LINE",
"284 1420 LINE",
"284 1080 LINE",
"376 1080 LINE",
"784 0 LINE",
"874 0 LINE"
);
},
{
closed = 1;
nodes = (
"356 1420 LINE",
"148 1420 LINE",
"148 0 LINE",
"356 0 LINE"
);
},
{
closed = 1;
nodes = (
"1052 1420 LINE",
"844 1420 LINE",
"844 0 LINE",
"1052 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */\0122 5 8 13 4 9 2 114 12 7 8 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni003E;
unicode = 003E;
},
{
glyphname = question;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"704 1420 LINE",
"496 1420 LINE",
"496 0 LINE",
"704 0 LINE"
);
},
{
closed = 1;
nodes = (
"1120 1420 LINE",
"80 1420 LINE",
"80 1230 LINE",
"1120 1230 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0122 5 4 106 5 2 114 0 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[1]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni003F;
unicode = 003F;
},
{
glyphname = at;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"706 1228 LINE",
"494 1228 LINE",
"494 190 LINE",
"706 190 LINE"
);
},
{
closed = 1;
nodes = (
"1100 803 LINE",
"100 803 LINE",
"100 617 LINE",
"1100 617 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\0124 0 105 5 4 106 5 1 105 5 147 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[1]	/* MoveIndirectAbsPt */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0040;
unicode = 0040;
},
{
glyphname = A;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1048 27 OFFCURVE",
"1090 40 QCURVE",
"1012 214 LINE",
"966 201 OFFCURVE",
"821 164 OFFCURVE",
"726 164 QCURVE SMOOTH",
"504 164 OFFCURVE",
"280 443 OFFCURVE",
"280 722 QCURVE SMOOTH",
"280 977 OFFCURVE",
"504 1256 OFFCURVE",
"706 1256 QCURVE SMOOTH",
"786 1256 OFFCURVE",
"925 1182 OFFCURVE",
"971 1114 QCURVE",
"1120 1262 LINE",
"1067 1347 OFFCURVE",
"843 1440 OFFCURVE",
"694 1440 QCURVE SMOOTH",
"396 1440 OFFCURVE",
"66 1059 OFFCURVE",
"66 712 QCURVE SMOOTH",
"66 346 OFFCURVE",
"384 -20 OFFCURVE",
"702 -20 QCURVE SMOOTH",
"837 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1090 710 LINE",
"892 710 LINE",
"892 40 LINE",
"1090 40 LINE"
);
},
{
closed = 1;
nodes = (
"1084 710 LINE",
"610 710 LINE",
"610 520 LINE",
"1084 520 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01227 30 31 106 10 6 30 30 0 6 13 106 6 3 114 26 0 19 106 0 9 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0041;
unicode = 0041;
},
{
glyphname = B;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"993 0 OFFCURVE",
"1074 22 QCURVE",
"1050 208 LINE",
"921 170 OFFCURVE",
"838 170 QCURVE SMOOTH",
"747 170 OFFCURVE",
"654 220 OFFCURVE",
"622 326 OFFCURVE",
"622 410 QCURVE SMOOTH",
"622 1500 LINE",
"410 1500 LINE",
"410 400 LINE SMOOTH",
"410 180 OFFCURVE",
"574 -20 OFFCURVE",
"758 -20 QCURVE SMOOTH",
"844 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"428 1500 LINE",
"98 1500 LINE",
"98 1314 LINE",
"428 1314 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\0125 17 0 10 106 17 16 106 17 0 114 0 11 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0042;
unicode = 0042;
},
{
glyphname = C;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1175 1420 LINE",
"955 1420 LINE",
"609 710 LINE",
"591 710 LINE",
"245 1420 LINE",
"25 1420 LINE",
"515 474 LINE",
"685 474 LINE"
);
},
{
closed = 1;
nodes = (
"704 700 LINE",
"496 700 LINE",
"496 0 LINE",
"704 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\0120 9 3 3 1 8 8 114 6 1 2 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0043;
unicode = 0043;
},
{
glyphname = D;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"845 440 OFFCURVE",
"1120 699 OFFCURVE",
"1120 950 QCURVE SMOOTH",
"1120 1182 OFFCURVE",
"845 1420 OFFCURVE",
"578 1420 QCURVE SMOOTH",
"348 1420 LINE",
"348 1230 LINE",
"578 1230 LINE SMOOTH",
"742 1230 OFFCURVE",
"910 1088 OFFCURVE",
"910 950 QCURVE SMOOTH",
"910 793 OFFCURVE",
"742 630 OFFCURVE",
"578 630 QCURVE SMOOTH",
"344 630 LINE",
"344 440 LINE",
"578 440 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"368 1420 LINE",
"160 1420 LINE",
"160 0 LINE",
"368 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\0120 1 106 0 0 18 19 10 9 106 10 19 2 114 18 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0044;
unicode = 0044;
},
{
glyphname = E;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1060 1420 LINE",
"852 1420 LINE",
"852 0 LINE",
"1060 0 LINE"
);
},
{
closed = 1;
nodes = (
"348 1420 LINE",
"140 1420 LINE",
"140 0 LINE",
"348 0 LINE"
);
},
{
closed = 1;
nodes = (
"1023 802 LINE",
"182 802 LINE",
"182 612 LINE",
"1023 612 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 4 1 5 8 9 106 8 8 4 5 2 114 4 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0045;
unicode = 0045;
},
{
glyphname = F;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"898 1362 LINE",
"150 190 LINE",
"302 68 LINE",
"1050 1230 LINE"
);
},
{
closed = 1;
nodes = (
"1070 190 LINE",
"150 190 LINE",
"150 0 LINE",
"1070 0 LINE"
);
},
{
closed = 1;
nodes = (
"1050 1420 LINE",
"150 1420 LINE",
"150 1230 LINE",
"1050 1230 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0122 3 9 8 106 9 2 114 0 1 4 6 106 4 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0046;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"724 254 LINE",
"492 254 LINE",
"412 -436 LINE",
"604 -436 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0121 0 106 1 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0047;
unicode = 0047;
},
{
glyphname = H;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"594 862 LINE",
"634 862 LINE",
"701 1060 LINE",
"501 1060 LINE",
"370 160 LINE",
"350 160 LINE",
"230 1420 LINE",
"20 1420 LINE",
"180 0 LINE",
"489 0 LINE"
);
},
{
closed = 1;
nodes = (
"1180 1420 LINE",
"970 1420 LINE",
"850 160 LINE",
"830 160 LINE",
"701 1060 LINE",
"501 1060 LINE",
"566 862 LINE",
"606 862 LINE",
"711 0 LINE",
"1020 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\0125 12 13 106 8 12 12 10 17 1 2 114 10 15 0 3 106 0 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP1[ ]	/* SetRefPoint1 */\012IP[ ]	/* InterpolatePts */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0048;
unicode = 0048;
},
{
glyphname = I;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1044 190 OFFCURVE",
"1044 380 QCURVE SMOOTH",
"1044 548 OFFCURVE",
"832 743 OFFCURVE",
"662 756 QCURVE SMOOTH",
"356 780 LINE",
"380 650 LINE",
"412 650 LINE SMOOTH",
"547 650 OFFCURVE",
"735 592 OFFCURVE",
"834 480 OFFCURVE",
"834 400 QCURVE SMOOTH",
"834 288 OFFCURVE",
"662 164 OFFCURVE",
"506 164 QCURVE SMOOTH",
"389 164 OFFCURVE",
"236 202 OFFCURVE",
"175 219 QCURVE",
"150 28 LINE",
"221 6 OFFCURVE",
"404 -20 OFFCURVE",
"514 -20 QCURVE SMOOTH",
"767 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"718 770 LINE",
"850 805 OFFCURVE",
"1014 994 OFFCURVE",
"1014 1122 QCURVE SMOOTH",
"1014 1275 OFFCURVE",
"802 1440 OFFCURVE",
"608 1440 QCURVE SMOOTH",
"459 1440 OFFCURVE",
"217 1345 OFFCURVE",
"125 1241 QCURVE",
"263 1104 LINE",
"339 1180 OFFCURVE",
"510 1256 OFFCURVE",
"586 1256 QCURVE SMOOTH",
"691 1256 OFFCURVE",
"804 1159 OFFCURVE",
"804 1072 QCURVE SMOOTH",
"804 1000 OFFCURVE",
"711 883 OFFCURVE",
"514 801 OFFCURVE",
"356 780 QCURVE",
"380 650 LINE",
"718 650 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01217 44 16 45 24 105 15 35 34 38 45 45 0 38 31 106 38 5 114 0 7 106 0 13 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0049;
unicode = 0049;
},
{
glyphname = J;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"704 1730 LINE",
"496 1730 LINE",
"496 -310 LINE",
"704 -310 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0121 0 106 1 149 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni004A;
unicode = 004A;
},
{
glyphname = K;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"704 1430 LINE",
"496 1430 LINE",
"512 456 LINE",
"684 456 LINE"
);
},
{
closed = 1;
nodes = (
"748 67 OFFCURVE",
"748 128 QCURVE SMOOTH",
"748 190 OFFCURVE",
"662 276 OFFCURVE",
"600 276 QCURVE SMOOTH",
"539 276 OFFCURVE",
"452 190 OFFCURVE",
"452 128 QCURVE SMOOTH",
"452 67 OFFCURVE",
"539 -20 OFFCURVE",
"600 -20 QCURVE SMOOTH",
"662 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01210 3 105 4 10 106 4 19 114 1 16 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni004B;
unicode = 004B;
},
{
glyphname = L;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"748 67 OFFCURVE",
"748 128 QCURVE SMOOTH",
"748 190 OFFCURVE",
"662 276 OFFCURVE",
"600 276 QCURVE SMOOTH",
"539 276 OFFCURVE",
"452 190 OFFCURVE",
"452 128 QCURVE SMOOTH",
"452 67 OFFCURVE",
"539 -20 OFFCURVE",
"600 -20 QCURVE SMOOTH",
"662 -20 OFFCURVE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0120 6 106 0 19 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni004C;
unicode = 004C;
},
{
glyphname = M;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"790 92 OFFCURVE",
"800 192 QCURVE",
"892 192 LINE",
"820 494 LINE",
"820 330 OFFCURVE",
"691 160 OFFCURVE",
"566 160 QCURVE SMOOTH",
"438 160 OFFCURVE",
"306 342 OFFCURVE",
"306 520 QCURVE SMOOTH",
"306 708 OFFCURVE",
"438 900 OFFCURVE",
"566 900 QCURVE SMOOTH",
"691 900 OFFCURVE",
"820 730 OFFCURVE",
"820 566 QCURVE",
"882 868 LINE",
"800 868 LINE",
"787 968 OFFCURVE",
"638 1080 OFFCURVE",
"519 1080 QCURVE SMOOTH",
"311 1080 OFFCURVE",
"96 796 OFFCURVE",
"96 520 QCURVE SMOOTH",
"96 254 OFFCURVE",
"311 -20 OFFCURVE",
"519 -20 QCURVE SMOOTH",
"641 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1032 1500 LINE",
"820 1500 LINE",
"820 198 LINE",
"842 -10 LINE",
"1032 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01232 10 114 30 0 114 25 29 23 11 9 5 0 6 14 106 6 7 114 0 20 106 0 11 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni004D;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1084 700 QCURVE SMOOTH",
"1084 1440 OFFCURVE",
"600 1440 QCURVE SMOOTH",
"116 1440 OFFCURVE",
"116 700 QCURVE SMOOTH",
"116 -20 OFFCURVE",
"600 -20 QCURVE SMOOTH",
"1084 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"750 633 OFFCURVE",
"750 700 QCURVE SMOOTH",
"750 768 OFFCURVE",
"668 850 OFFCURVE",
"600 850 QCURVE SMOOTH",
"533 850 OFFCURVE",
"450 768 OFFCURVE",
"450 700 QCURVE SMOOTH",
"450 633 OFFCURVE",
"533 550 OFFCURVE",
"600 550 QCURVE SMOOTH",
"668 550 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"330 700 QCURVE SMOOTH",
"330 1256 OFFCURVE",
"600 1256 QCURVE SMOOTH",
"870 1256 OFFCURVE",
"870 700 QCURVE SMOOTH",
"870 164 OFFCURVE",
"600 164 QCURVE SMOOTH",
"330 164 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 17 values pushed */\0128 14 106 8 0 4 24 106 4 5 114 0 20 106 0 13 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni004E;
unicode = 004E;
},
{
glyphname = O;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1032 690 LINE SMOOTH",
"1032 876 OFFCURVE",
"848 1080 OFFCURVE",
"680 1080 QCURVE SMOOTH",
"547 1080 OFFCURVE",
"409 975 OFFCURVE",
"400 868 QCURVE",
"318 868 LINE",
"380 596 LINE",
"380 890 OFFCURVE",
"630 890 QCURVE SMOOTH",
"720 890 OFFCURVE",
"820 786 OFFCURVE",
"820 690 QCURVE SMOOTH",
"820 0 LINE",
"1032 0 LINE"
);
},
{
closed = 1;
nodes = (
"380 836 LINE",
"360 1060 LINE",
"168 1060 LINE",
"168 0 LINE",
"380 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0127 6 16 17 6 114 15 16 10 114 11 4 106 11 7 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni004F;
unicode = 004F;
},
{
glyphname = P;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"566 750 LINE SMOOTH",
"499 827 OFFCURVE",
"422 967 OFFCURVE",
"422 1040 QCURVE SMOOTH",
"422 1144 OFFCURVE",
"523 1256 OFFCURVE",
"614 1256 QCURVE",
"610 1440 LINE",
"415 1440 OFFCURVE",
"202 1233 OFFCURVE",
"202 1042 QCURVE SMOOTH",
"202 936 OFFCURVE",
"316 709 OFFCURVE",
"446 566 QCURVE SMOOTH",
"962 0 LINE",
"1224 0 LINE"
);
},
{
closed = 1;
nodes = (
"1092 391 OFFCURVE",
"1092 766 QCURVE",
"900 766 LINE",
"900 478 OFFCURVE",
"684 164 OFFCURVE",
"486 164 QCURVE SMOOTH",
"383 164 OFFCURVE",
"258 269 OFFCURVE",
"258 354 QCURVE SMOOTH",
"258 452 OFFCURVE",
"408 589 OFFCURVE",
"546 616 QCURVE",
"436 738 LINE",
"255 711 OFFCURVE",
"56 505 OFFCURVE",
"56 344 QCURVE SMOOTH",
"56 179 OFFCURVE",
"279 -20 OFFCURVE",
"462 -20 QCURVE SMOOTH",
"762 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"990 1274 OFFCURVE",
"791 1440 OFFCURVE",
"610 1440 QCURVE",
"614 1256 LINE",
"691 1256 OFFCURVE",
"776 1187 OFFCURVE",
"776 1122 QCURVE",
"990 1122 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\01222 23 32 36 32 36 32 16 39 40 8 106 7 40 3 114 16 29 106 16 9 114 0 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012MDAP[1]	/* MoveDirectAbsPt */\012SRP1[ ]	/* SetRefPoint1 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0050;
unicode = 0050;
},
{
glyphname = Q;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"662 -125 OFFCURVE",
"747 41 OFFCURVE",
"726 156 QCURVE SMOOTH",
"716 214 OFFCURVE",
"677 323 OFFCURVE",
"644 434 OFFCURVE",
"644 492 QCURVE SMOOTH",
"644 531 OFFCURVE",
"708 584 OFFCURVE",
"807 614 OFFCURVE",
"913 627 OFFCURVE",
"954 627 QCURVE",
"954 785 LINE",
"914 785 OFFCURVE",
"809 805 OFFCURVE",
"709 844 OFFCURVE",
"644 901 OFFCURVE",
"644 938 QCURVE SMOOTH",
"644 999 OFFCURVE",
"677 1109 OFFCURVE",
"716 1217 OFFCURVE",
"726 1274 QCURVE SMOOTH",
"746 1385 OFFCURVE",
"662 1542 OFFCURVE",
"493 1626 OFFCURVE",
"384 1626 QCURVE SMOOTH",
"326 1626 OFFCURVE",
"247 1615 OFFCURVE",
"214 1606 QCURVE",
"238 1432 LINE",
"273 1437 OFFCURVE",
"338 1442 OFFCURVE",
"366 1442 QCURVE SMOOTH",
"437 1442 OFFCURVE",
"526 1354 OFFCURVE",
"512 1274 QCURVE SMOOTH",
"502 1215 OFFCURVE",
"461 1107 OFFCURVE",
"426 1000 OFFCURVE",
"426 942 QCURVE SMOOTH",
"426 839 OFFCURVE",
"586 725 OFFCURVE",
"728 723 QCURVE",
"728 689 LINE",
"586 687 OFFCURVE",
"426 580 OFFCURVE",
"426 488 QCURVE SMOOTH",
"426 428 OFFCURVE",
"461 319 OFFCURVE",
"502 213 OFFCURVE",
"512 156 QCURVE SMOOTH",
"528 68 OFFCURVE",
"437 -30 OFFCURVE",
"366 -30 QCURVE SMOOTH",
"338 -30 OFFCURVE",
"273 -24 OFFCURVE",
"238 -20 QCURVE",
"214 -194 LINE",
"247 -203 OFFCURVE",
"326 -214 OFFCURVE",
"384 -214 QCURVE SMOOTH",
"493 -214 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01217 18 49 48 106 49 49 35 0 7 106 35 0 105 35 28 106 35 154 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0051;
unicode = 0051;
},
{
glyphname = R;
layers = (
{
components = (
{
name = V;
transform = "{1, 0, 0, 1, -200, 0}";
},
{
name = V;
transform = "{1, 0, 0, 1, 204, 0}";
}
);
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
width = 1200;
}
);
note = uni0052;
unicode = 0052;
},
{
glyphname = S;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"966 1420 LINE",
"790 1420 LINE",
"670 0 LINE",
"846 0 LINE"
);
},
{
closed = 1;
nodes = (
"1100 530 LINE",
"100 530 LINE",
"100 360 LINE",
"1100 360 LINE"
);
},
{
closed = 1;
nodes = (
"530 1420 LINE",
"354 1420 LINE",
"234 0 LINE",
"410 0 LINE"
);
},
{
closed = 1;
nodes = (
"1100 1060 LINE",
"100 1060 LINE",
"100 890 LINE",
"1100 890 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\0125 4 106 12 13 106 5 12 5 12 8 1 9 16 114 0 8 18 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP1[ ]	/* SetRefPoint1 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0053;
unicode = 0053;
},
{
glyphname = T;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"682 1740 LINE",
"544 1740 LINE",
"544 -320 LINE",
"682 -320 LINE"
);
},
{
closed = 1;
nodes = (
"1057 173 OFFCURVE",
"1057 366 QCURVE SMOOTH",
"1057 512 OFFCURVE",
"893 698 OFFCURVE",
"735 772 QCURVE SMOOTH",
"527 870 LINE SMOOTH",
"455 904 OFFCURVE",
"381 991 OFFCURVE",
"381 1060 QCURVE SMOOTH",
"381 1157 OFFCURVE",
"494 1256 OFFCURVE",
"597 1256 QCURVE SMOOTH",
"680 1256 OFFCURVE",
"833 1191 OFFCURVE",
"921 1119 QCURVE",
"1061 1261 LINE",
"959 1356 OFFCURVE",
"739 1440 OFFCURVE",
"596 1440 QCURVE SMOOTH",
"391 1440 OFFCURVE",
"167 1236 OFFCURVE",
"167 1050 QCURVE SMOOTH",
"167 912 OFFCURVE",
"322 726 OFFCURVE",
"467 660 QCURVE SMOOTH",
"713 548 LINE SMOOTH",
"843 489 OFFCURVE",
"843 362 QCURVE SMOOTH",
"843 262 OFFCURVE",
"707 164 OFFCURVE",
"567 164 QCURVE SMOOTH",
"470 164 OFFCURVE",
"265 213 OFFCURVE",
"155 260 QCURVE",
"129 58 LINE",
"219 19 OFFCURVE",
"430 -20 OFFCURVE",
"551 -20 QCURVE SMOOTH",
"806 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\01233 20 36 37 16 17 14 40 27 26 10 4 23 30 105 1 23 3 114 4 11 105 3 96 4 9 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SMD[ ]	/* SetMinimumDistance */\012MDRP[01101]	/* MoveDirectRelPt */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012MDRP[01101]	/* MoveDirectRelPt */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0054;
unicode = 0054;
},
{
glyphname = U;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1024 1106 LINE",
"94 442 LINE",
"186 306 LINE",
"1116 976 LINE"
);
},
{
closed = 1;
nodes = (
"1166 157 OFFCURVE",
"1166 302 QCURVE SMOOTH",
"1166 449 OFFCURVE",
"995 626 OFFCURVE",
"854 626 QCURVE SMOOTH",
"712 626 OFFCURVE",
"540 449 OFFCURVE",
"540 302 QCURVE SMOOTH",
"540 157 OFFCURVE",
"712 -20 OFFCURVE",
"854 -20 QCURVE SMOOTH",
"995 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"721 231 OFFCURVE",
"721 302 QCURVE SMOOTH",
"721 375 OFFCURVE",
"793 463 OFFCURVE",
"854 463 QCURVE SMOOTH",
"913 463 OFFCURVE",
"985 375 OFFCURVE",
"985 302 QCURVE SMOOTH",
"985 231 OFFCURVE",
"913 143 OFFCURVE",
"854 143 QCURVE SMOOTH",
"793 143 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"680 971 OFFCURVE",
"680 1116 QCURVE SMOOTH",
"680 1266 OFFCURVE",
"509 1440 OFFCURVE",
"368 1440 QCURVE SMOOTH",
"226 1440 OFFCURVE",
"54 1263 OFFCURVE",
"54 1116 QCURVE SMOOTH",
"54 971 OFFCURVE",
"226 794 OFFCURVE",
"368 794 QCURVE SMOOTH",
"509 794 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"235 1045 OFFCURVE",
"235 1116 QCURVE SMOOTH",
"235 1190 OFFCURVE",
"307 1279 OFFCURVE",
"368 1279 QCURVE SMOOTH",
"427 1279 OFFCURVE",
"499 1190 OFFCURVE",
"499 1116 QCURVE SMOOTH",
"499 1045 OFFCURVE",
"427 957 OFFCURVE",
"368 957 QCURVE SMOOTH",
"307 957 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01228 40 106 34 28 105 0 1 3 2 4 4 34 46 106 34 17 10 22 106 4 10 105 4 16 106 4 19 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[1]	/* MoveIndirectAbsPt */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012MIAP[1]	/* MoveIndirectAbsPt */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0055;
unicode = 0055;
},
{
glyphname = V;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"716 1420 LINE",
"484 1420 LINE",
"504 780 LINE",
"696 780 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0121 0 106 1 16 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0056;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"998 -20 LINE",
"970 -20 LINE SMOOTH",
"733 -20 OFFCURVE",
"476 366 OFFCURVE",
"476 716 QCURVE SMOOTH",
"476 1060 OFFCURVE",
"733 1440 OFFCURVE",
"970 1440 QCURVE SMOOTH",
"998 1440 LINE",
"998 1620 LINE",
"950 1620 LINE SMOOTH",
"625 1620 OFFCURVE",
"266 1147 OFFCURVE",
"266 716 QCURVE SMOOTH",
"266 279 OFFCURVE",
"625 -200 OFFCURVE",
"950 -200 QCURVE SMOOTH",
"998 -200 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\0120 15 106 6 0 105 6 9 106 6 154 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0057;
unicode = 0057;
},
{
glyphname = X;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"576 -200 OFFCURVE",
"934 279 OFFCURVE",
"934 716 QCURVE SMOOTH",
"934 1147 OFFCURVE",
"576 1620 OFFCURVE",
"250 1620 QCURVE SMOOTH",
"202 1620 LINE",
"202 1440 LINE",
"230 1440 LINE SMOOTH",
"467 1440 OFFCURVE",
"724 1060 OFFCURVE",
"724 716 QCURVE SMOOTH",
"724 366 OFFCURVE",
"467 -20 OFFCURVE",
"230 -20 QCURVE SMOOTH",
"202 -20 LINE",
"202 -200 LINE",
"250 -200 LINE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\0120 1 106 11 0 105 11 8 106 11 154 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0058;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"656 744 LINE",
"544 648 LINE",
"826 258 LINE",
"992 398 LINE"
);
},
{
closed = 1;
nodes = (
"544 744 LINE",
"208 398 LINE",
"374 258 LINE",
"656 648 LINE"
);
},
{
closed = 1;
nodes = (
"186 962 LINE",
"112 758 LINE",
"574 626 LINE",
"626 766 LINE"
);
},
{
closed = 1;
nodes = (
"708 1176 LINE",
"492 1176 LINE",
"526 696 LINE",
"674 696 LINE"
);
},
{
closed = 1;
nodes = (
"1014 962 LINE",
"574 766 LINE",
"626 626 LINE",
"1088 758 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */\01216 8 1 7 15 12 6 2 11 17 10 13 4 4 0 10 9 106 18 19 106 3 5 18 10 4 13 0 105 13 150 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012SRP1[ ]	/* SetRefPoint1 */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0059;
unicode = 0059;
},
{
glyphname = Z;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1130 1610 LINE",
"918 1610 LINE",
"114 -190 LINE",
"326 -190 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0121 0 106 1 152 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni005A;
unicode = 005A;
},
{
glyphname = bracketleft;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"464 220 LINE",
"743 402 OFFCURVE",
"1016 797 OFFCURVE",
"1016 1012 QCURVE SMOOTH",
"1016 1227 OFFCURVE",
"793 1440 OFFCURVE",
"568 1440 QCURVE SMOOTH",
"429 1440 OFFCURVE",
"175 1320 OFFCURVE",
"106 1221 QCURVE",
"244 1084 LINE",
"307 1162 OFFCURVE",
"483 1256 OFFCURVE",
"564 1256 QCURVE SMOOTH",
"686 1256 OFFCURVE",
"806 1134 OFFCURVE",
"806 1012 QCURVE SMOOTH",
"806 803 OFFCURVE",
"481 410 OFFCURVE",
"152 228 QCURVE",
"152 0 LINE",
"464 0 LINE"
);
},
{
closed = 1;
nodes = (
"1076 190 LINE",
"212 190 LINE",
"212 0 LINE",
"1076 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\01211 10 0 14 7 106 14 5 114 22 23 106 22 20 0 1 106 0 12 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni005B;
unicode = 005B;
},
{
glyphname = backslash;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1094 234 OFFCURVE",
"1094 460 QCURVE SMOOTH",
"1094 670 OFFCURVE",
"892 900 OFFCURVE",
"706 900 QCURVE SMOOTH",
"577 900 OFFCURVE",
"398 779 OFFCURVE",
"368 668 QCURVE",
"294 668 LINE",
"128 486 LINE",
"128 226 OFFCURVE",
"361 -20 OFFCURVE",
"608 -20 QCURVE SMOOTH",
"837 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"342 310 OFFCURVE",
"342 440 QCURVE SMOOTH",
"342 572 OFFCURVE",
"492 716 OFFCURVE",
"631 716 QCURVE SMOOTH",
"753 716 OFFCURVE",
"884 583 OFFCURVE",
"884 460 QCURVE SMOOTH",
"884 321 OFFCURVE",
"742 164 OFFCURVE",
"615 164 QCURVE SMOOTH",
"486 164 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"350 666 LINE SMOOTH",
"350 1209 OFFCURVE",
"984 1236 QCURVE",
"964 1426 LINE",
"541 1405 OFFCURVE",
"128 981 OFFCURVE",
"128 574 QCURVE SMOOTH",
"128 486 LINE",
"350 552 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0128 20 106 8 4 34 3 26 5 0 30 31 106 30 5 114 0 14 106 0 13 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni005C;
unicode = 005C;
},
{
glyphname = bracketright;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1154 1420 LINE",
"925 1420 LINE",
"437 0 LINE",
"666 0 LINE"
);
},
{
closed = 1;
nodes = (
"326 1390 LINE",
"112 1390 LINE",
"112 922 LINE",
"326 922 LINE"
);
},
{
closed = 1;
nodes = (
"1154 1420 LINE",
"112 1420 LINE",
"112 1230 LINE",
"1012 1230 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\0125 9 4 96 9 8 106 1 9 4 114 0 12 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SMD[ ]	/* SetMinimumDistance */\012MDRP[01110]	/* MoveDirectRelPt */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni005D;
unicode = 005D;
},
{
glyphname = asciicircum;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1084 195 OFFCURVE",
"1084 390 QCURVE SMOOTH",
"1084 569 OFFCURVE",
"831 764 OFFCURVE",
"600 764 QCURVE SMOOTH",
"369 764 OFFCURVE",
"116 569 OFFCURVE",
"116 390 QCURVE SMOOTH",
"116 195 OFFCURVE",
"369 -20 OFFCURVE",
"600 -20 QCURVE SMOOTH",
"831 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"326 288 OFFCURVE",
"326 400 QCURVE SMOOTH",
"326 520 OFFCURVE",
"469 654 OFFCURVE",
"600 654 QCURVE SMOOTH",
"731 654 OFFCURVE",
"874 520 OFFCURVE",
"874 400 QCURVE SMOOTH",
"874 288 OFFCURVE",
"731 164 OFFCURVE",
"600 164 QCURVE SMOOTH",
"469 164 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"768 808 LINE",
"434 808 LINE",
"434 706 LINE",
"768 706 LINE"
);
},
{
closed = 1;
nodes = (
"366 949 OFFCURVE",
"366 1040 QCURVE SMOOTH",
"366 1144 OFFCURVE",
"488 1256 OFFCURVE",
"600 1256 QCURVE SMOOTH",
"712 1256 OFFCURVE",
"834 1144 OFFCURVE",
"834 1040 QCURVE SMOOTH",
"834 949 OFFCURVE",
"712 846 OFFCURVE",
"600 846 QCURVE SMOOTH",
"488 846 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1044 921 OFFCURVE",
"1044 1080 QCURVE SMOOTH",
"1044 1251 OFFCURVE",
"812 1440 OFFCURVE",
"600 1440 QCURVE SMOOTH",
"389 1440 OFFCURVE",
"156 1251 OFFCURVE",
"156 1080 QCURVE SMOOTH",
"156 921 OFFCURVE",
"389 746 OFFCURVE",
"600 746 QCURVE SMOOTH",
"812 746 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\01226 27 18 28 40 105 18 28 105 18 6 105 18 0 46 34 106 46 5 114 0 12 106 0 13 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni005E;
unicode = 005E;
},
{
glyphname = underscore;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"812 627 OFFCURVE",
"842 738 QCURVE",
"916 738 LINE",
"1082 920 LINE",
"1082 1180 OFFCURVE",
"849 1426 OFFCURVE",
"602 1426 QCURVE SMOOTH",
"373 1426 OFFCURVE",
"116 1173 OFFCURVE",
"116 946 QCURVE SMOOTH",
"116 736 OFFCURVE",
"318 506 OFFCURVE",
"504 506 QCURVE SMOOTH",
"633 506 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1082 426 OFFCURVE",
"1082 832 QCURVE SMOOTH",
"1082 920 LINE",
"860 854 LINE",
"860 740 LINE SMOOTH",
"860 197 OFFCURVE",
"226 170 QCURVE",
"246 -20 LINE",
"669 1 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"326 823 OFFCURVE",
"326 946 QCURVE SMOOTH",
"326 1086 OFFCURVE",
"468 1242 OFFCURVE",
"595 1242 QCURVE SMOOTH",
"724 1242 OFFCURVE",
"868 1096 OFFCURVE",
"868 966 QCURVE SMOOTH",
"868 834 OFFCURVE",
"718 690 OFFCURVE",
"579 690 QCURVE SMOOTH",
"457 690 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0120 23 106 19 9 18 11 0 5 6 14 15 106 14 13 114 6 29 106 6 5 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni005F;
unicode = 005F;
},
{
glyphname = grave;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"748 871 OFFCURVE",
"748 932 QCURVE SMOOTH",
"748 994 OFFCURVE",
"662 1080 OFFCURVE",
"600 1080 QCURVE SMOOTH",
"539 1080 OFFCURVE",
"452 994 OFFCURVE",
"452 932 QCURVE SMOOTH",
"452 871 OFFCURVE",
"539 784 OFFCURVE",
"600 784 QCURVE SMOOTH",
"662 784 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"724 254 LINE",
"492 254 LINE",
"412 -436 LINE",
"604 -436 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01214 12 106 14 6 0 106 6 7 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0060;
unicode = 0060;
},
{
glyphname = a;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"314 700 LINE",
"314 718 LINE",
"1054 984 LINE",
"1054 1204 LINE",
"96 810 LINE",
"96 608 LINE",
"1054 214 LINE",
"1054 434 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\0124 3 106 2 4 106 7 0 106 1 7 106 5 6 2 1 106 2 151 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0061;
unicode = 0061;
},
{
glyphname = b;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1100 1052 LINE",
"100 1052 LINE",
"100 866 LINE",
"1100 866 LINE"
);
},
{
closed = 1;
nodes = (
"1100 552 LINE",
"100 552 LINE",
"100 366 LINE",
"1100 366 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0125 4 106 5 1 1 0 106 1 148 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[1]	/* MoveIndirectAbsPt */\012CALL[ ]	/* CallFunction */\012SRP0[ ]	/* SetRefPoint0 */\012MDRP[00110]	/* MoveDirectRelPt */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0062;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1104 810 LINE",
"146 1204 LINE",
"146 984 LINE",
"846 718 LINE",
"846 700 LINE",
"146 434 LINE",
"146 214 LINE",
"1104 608 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0123 2 6 7 1 0 106 7 1 106 6 7 106 4 5 106 6 4 106 6 151 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0063;
unicode = 0063;
},
{
glyphname = d;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"656 538 LINE SMOOTH",
"656 597 OFFCURVE",
"720 696 OFFCURVE",
"784 738 QCURVE SMOOTH",
"895 809 OFFCURVE",
"1006 991 OFFCURVE",
"1006 1102 QCURVE SMOOTH",
"1006 1263 OFFCURVE",
"791 1440 OFFCURVE",
"596 1440 QCURVE",
"594 1250 LINE",
"686 1250 OFFCURVE",
"786 1167 OFFCURVE",
"786 1092 QCURVE SMOOTH",
"786 1023 OFFCURVE",
"705 904 OFFCURVE",
"624 854 QCURVE SMOOTH",
"542 802 OFFCURVE",
"460 651 OFFCURVE",
"460 552 QCURVE SMOOTH",
"460 456 LINE",
"656 456 LINE"
);
},
{
closed = 1;
nodes = (
"500 1250 OFFCURVE",
"594 1250 QCURVE",
"596 1440 LINE",
"445 1440 OFFCURVE",
"186 1320 OFFCURVE",
"116 1221 QCURVE",
"254 1078 LINE",
"318 1156 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"710 67 OFFCURVE",
"710 128 QCURVE SMOOTH",
"710 190 OFFCURVE",
"624 276 OFFCURVE",
"562 276 QCURVE SMOOTH",
"501 276 OFFCURVE",
"414 190 OFFCURVE",
"414 128 QCURVE SMOOTH",
"414 67 OFFCURVE",
"501 -20 OFFCURVE",
"562 -20 QCURVE SMOOTH",
"624 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\01223 22 7 14 4 17 6 0 11 27 106 11 10 106 36 0 105 30 36 106 22 30 19 114 26 11 3 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0064;
unicode = 0064;
},
{
glyphname = e;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1062 240 OFFCURVE",
"1062 476 QCURVE SMOOTH",
"1062 1420 LINE",
"854 1420 LINE",
"854 476 LINE SMOOTH",
"854 325 OFFCURVE",
"711 160 OFFCURVE",
"579 160 QCURVE SMOOTH",
"443 160 OFFCURVE",
"294 326 OFFCURVE",
"294 476 QCURVE",
"86 476 LINE",
"86 241 OFFCURVE",
"340 -20 OFFCURVE",
"574 -20 QCURVE SMOOTH",
"804 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"956 1420 LINE",
"490 1420 LINE",
"490 1230 LINE",
"956 1230 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0124 4 0 17 16 106 12 17 2 114 0 7 106 0 9 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0065;
unicode = 0065;
},
{
glyphname = f;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1032 -280 LINE",
"930 -280 LINE SMOOTH",
"812 -280 OFFCURVE",
"694 -151 OFFCURVE",
"694 -22 QCURVE SMOOTH",
"694 62 LINE",
"496 62 LINE",
"496 -20 LINE SMOOTH",
"496 -240 OFFCURVE",
"714 -460 OFFCURVE",
"930 -460 QCURVE SMOOTH",
"1012 -460 LINE"
);
},
{
closed = 1;
nodes = (
"1124 700 QCURVE SMOOTH",
"1124 1440 OFFCURVE",
"600 1440 QCURVE SMOOTH",
"76 1440 OFFCURVE",
"76 700 QCURVE SMOOTH",
"76 -20 OFFCURVE",
"600 -20 QCURVE SMOOTH",
"1124 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"290 700 QCURVE SMOOTH",
"290 1256 OFFCURVE",
"600 1256 QCURVE SMOOTH",
"910 1256 OFFCURVE",
"910 700 QCURVE SMOOTH",
"910 164 OFFCURVE",
"600 164 QCURVE SMOOTH",
"290 164 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 19 values pushed */\01216 24 106 16 3 114 5 12 20 105 0 9 106 12 0 105 12 9 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0066;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1060 218 OFFCURVE",
"1060 456 QCURVE SMOOTH",
"1060 1420 LINE",
"852 1420 LINE",
"852 456 LINE SMOOTH",
"852 170 OFFCURVE",
"600 170 QCURVE SMOOTH",
"470 170 OFFCURVE",
"348 314 OFFCURVE",
"348 456 QCURVE SMOOTH",
"348 1420 LINE",
"140 1420 LINE",
"140 456 LINE SMOOTH",
"140 -20 OFFCURVE",
"596 -20 QCURVE SMOOTH",
"824 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 11 values pushed */\01212 3 0 8 106 3 2 114 0 9 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0067;
unicode = 0067;
},
{
glyphname = h;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1155 1420 LINE",
"941 1420 LINE",
"609 170 LINE",
"591 170 LINE",
"259 1420 LINE",
"45 1420 LINE",
"445 0 LINE",
"755 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */\0123 0 6 1 2 114 0 8 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0068;
unicode = 0068;
},
{
glyphname = i;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"673 746 LINE",
"295 1420 LINE",
"65 1420 LINE",
"541 636 LINE",
"905 0 LINE",
"1135 0 LINE"
);
},
{
closed = 1;
nodes = (
"659 636 LINE",
"1135 1420 LINE",
"905 1420 LINE",
"527 746 LINE",
"65 0 LINE",
"295 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\0121 10 4 7 4 2 5 5 6 8 114 9 2 2 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP1[ ]	/* SetRefPoint1 */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0069;
unicode = 0069;
},
{
glyphname = j;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"580 1634 LINE",
"372 1634 LINE",
"372 -214 LINE",
"580 -214 LINE"
);
},
{
closed = 1;
nodes = (
"998 -24 LINE",
"560 -24 LINE",
"560 -214 LINE",
"998 -214 LINE"
);
},
{
closed = 1;
nodes = (
"998 1634 LINE",
"560 1634 LINE",
"560 1444 LINE",
"998 1444 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 15 values pushed */\0129 8 106 9 1 4 5 106 4 1 0 106 1 153 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni006A;
unicode = 006A;
},
{
glyphname = k;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"828 1634 LINE",
"620 1634 LINE",
"620 -214 LINE",
"828 -214 LINE"
);
},
{
closed = 1;
nodes = (
"640 -24 LINE",
"202 -24 LINE",
"202 -214 LINE",
"640 -214 LINE"
);
},
{
closed = 1;
nodes = (
"640 1634 LINE",
"202 1634 LINE",
"202 1444 LINE",
"640 1444 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\0124 5 106 4 10 0 105 10 8 105 1 10 153 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni006B;
unicode = 006B;
},
{
glyphname = l;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"591 1260 LINE",
"609 1260 LINE",
"775 820 LINE",
"995 820 LINE",
"735 1420 LINE",
"465 1420 LINE",
"205 820 LINE",
"425 820 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\0126 4 1 0 106 1 2 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni006C;
unicode = 006C;
},
{
glyphname = m;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"579 1628 LINE",
"335 1628 LINE",
"620 1068 LINE",
"826 1068 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0122 0 106 2 17 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni006D;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1099 305 OFFCURVE",
"1099 600 QCURVE SMOOTH",
"1099 830 OFFCURVE",
"867 1080 OFFCURVE",
"655 1080 QCURVE SMOOTH",
"410 1080 OFFCURVE",
"395 868 QCURVE",
"313 868 LINE",
"375 596 LINE",
"375 900 OFFCURVE",
"645 900 QCURVE SMOOTH",
"762 900 OFFCURVE",
"889 744 OFFCURVE",
"889 600 QCURVE SMOOTH",
"889 390 OFFCURVE",
"680 160 OFFCURVE",
"489 160 QCURVE SMOOTH",
"426 160 OFFCURVE",
"298 169 OFFCURVE",
"245 194 QCURVE",
"163 0 LINE",
"235 -9 OFFCURVE",
"375 -20 OFFCURVE",
"447 -20 QCURVE SMOOTH",
"758 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"375 1500 LINE",
"163 1500 LINE",
"163 0 LINE",
"375 18 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01226 0 114 17 15 0 19 13 106 19 7 114 28 3 25 3 0 7 106 0 11 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni006E;
unicode = 006E;
},
{
glyphname = o;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1032 690 LINE SMOOTH",
"1032 876 OFFCURVE",
"848 1080 OFFCURVE",
"680 1080 QCURVE SMOOTH",
"547 1080 OFFCURVE",
"409 975 OFFCURVE",
"400 868 QCURVE",
"318 868 LINE",
"380 596 LINE",
"380 900 OFFCURVE",
"630 900 QCURVE SMOOTH",
"720 900 OFFCURVE",
"820 791 OFFCURVE",
"820 690 QCURVE SMOOTH",
"820 0 LINE",
"1032 0 LINE"
);
},
{
closed = 1;
nodes = (
"380 1500 LINE",
"168 1500 LINE",
"168 0 LINE",
"380 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\01217 0 114 7 6 11 15 16 10 114 11 4 106 11 7 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP1[ ]	/* SetRefPoint1 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni006F;
unicode = 006F;
},
{
glyphname = p;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"538 -454 OFFCURVE",
"776 -333 OFFCURVE",
"888 -95 OFFCURVE",
"888 94 QCURVE SMOOTH",
"888 384 LINE",
"676 384 LINE",
"676 62 LINE SMOOTH",
"676 -101 OFFCURVE",
"531 -260 OFFCURVE",
"370 -274 QCURVE SMOOTH",
"170 -292 LINE",
"180 -480 LINE",
"350 -468 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"692 1060 LINE",
"264 1060 LINE",
"264 874 LINE",
"692 874 LINE"
);
},
{
closed = 1;
nodes = (
"888 1060 LINE",
"676 1060 LINE",
"676 350 LINE",
"888 350 LINE"
);
},
{
closed = 1;
nodes = (
"908 1315 OFFCURVE",
"908 1376 QCURVE SMOOTH",
"908 1438 OFFCURVE",
"822 1524 OFFCURVE",
"760 1524 QCURVE SMOOTH",
"699 1524 OFFCURVE",
"612 1438 OFFCURVE",
"612 1376 QCURVE SMOOTH",
"612 1315 OFFCURVE",
"699 1228 OFFCURVE",
"760 1228 QCURVE SMOOTH",
"822 1228 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\01221 27 106 14 21 105 7 20 0 18 14 13 106 14 6 114 0 1 106 0 15 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[1]	/* ShiftPointByLastPoint */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0070;
unicode = 0070;
},
{
glyphname = q;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"737 402 OFFCURVE",
"1030 729 OFFCURVE",
"1072 1060 QCURVE",
"852 1060 LINE",
"829 889 OFFCURVE",
"732 683 OFFCURVE",
"562 592 OFFCURVE",
"430 592 QCURVE SMOOTH",
"310 592 LINE",
"310 402 LINE",
"480 402 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"372 1500 LINE",
"160 1500 LINE",
"160 0 LINE",
"372 0 LINE"
);
},
{
closed = 1;
nodes = (
"776 598 LINE",
"576 516 LINE",
"878 0 LINE",
"1140 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01217 16 0 1 106 0 0 11 6 12 0 114 15 11 10 114 6 6 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MIAP[1]	/* MoveIndirectAbsPt */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP1[ ]	/* SetRefPoint1 */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0071;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1088 830 LINE SMOOTH",
"1088 962 OFFCURVE",
"988 1080 OFFCURVE",
"878 1080 QCURVE SMOOTH",
"794 1080 OFFCURVE",
"705 990 OFFCURVE",
"700 928 QCURVE",
"618 928 LINE",
"690 776 LINE",
"690 920 OFFCURVE",
"794 920 QCURVE SMOOTH",
"876 920 OFFCURVE",
"876 810 QCURVE SMOOTH",
"876 0 LINE",
"1088 0 LINE"
);
},
{
closed = 1;
nodes = (
"324 836 LINE",
"300 1060 LINE",
"112 1060 LINE",
"112 0 LINE",
"324 0 LINE"
);
},
{
closed = 1;
nodes = (
"690 850 LINE SMOOTH",
"690 966 OFFCURVE",
"595 1080 OFFCURVE",
"512 1080 QCURVE SMOOTH",
"342 1080 OFFCURVE",
"330 928 QCURVE",
"262 928 LINE",
"324 776 LINE",
"324 920 OFFCURVE",
"426 920 QCURVE SMOOTH",
"510 920 OFFCURVE",
"510 830 QCURVE SMOOTH",
"510 0 LINE",
"690 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01216 6 114 0 20 20 27 7 5 25 4 10 15 10 114 23 10 3 106 29 10 7 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012SHP[1]	/* ShiftPointByLastPoint */\012SRP1[ ]	/* SetRefPoint1 */\012SHP[1]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0072;
unicode = 0072;
},
{
glyphname = s;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1064 268 OFFCURVE",
"1064 530 QCURVE SMOOTH",
"1064 793 OFFCURVE",
"821 1080 OFFCURVE",
"600 1080 QCURVE SMOOTH",
"380 1080 OFFCURVE",
"136 793 OFFCURVE",
"136 530 QCURVE SMOOTH",
"136 268 OFFCURVE",
"380 -20 OFFCURVE",
"600 -20 QCURVE SMOOTH",
"821 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"356 358 OFFCURVE",
"356 530 QCURVE SMOOTH",
"356 703 OFFCURVE",
"483 890 OFFCURVE",
"600 890 QCURVE SMOOTH",
"717 890 OFFCURVE",
"844 703 OFFCURVE",
"844 530 QCURVE SMOOTH",
"844 358 OFFCURVE",
"717 170 OFFCURVE",
"600 170 QCURVE SMOOTH",
"483 170 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\0120 12 106 6 18 106 6 7 114 0 11 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0073;
unicode = 0073;
},
{
glyphname = t;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"380 836 LINE",
"360 1060 LINE",
"168 1060 LINE",
"168 -460 LINE",
"380 -460 LINE"
);
},
{
closed = 1;
nodes = (
"1104 254 OFFCURVE",
"1104 520 QCURVE SMOOTH",
"1104 796 OFFCURVE",
"890 1080 OFFCURVE",
"681 1080 QCURVE SMOOTH",
"557 1080 OFFCURVE",
"404 968 OFFCURVE",
"390 868 QCURVE",
"308 868 LINE",
"380 566 LINE",
"380 730 OFFCURVE",
"509 900 OFFCURVE",
"634 900 QCURVE SMOOTH",
"762 900 OFFCURVE",
"894 708 OFFCURVE",
"894 520 QCURVE SMOOTH",
"894 342 OFFCURVE",
"762 160 OFFCURVE",
"634 160 QCURVE SMOOTH",
"509 160 OFFCURVE",
"380 330 OFFCURVE",
"380 494 QCURVE",
"308 192 LINE",
"400 192 LINE",
"410 92 OFFCURVE",
"559 -20 OFFCURVE",
"681 -20 QCURVE SMOOTH",
"890 -20 OFFCURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\0128 10 22 3 24 5 5 27 19 106 27 7 114 5 13 106 5 11 114 4 14 114 1 6 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0074;
unicode = 0074;
},
{
glyphname = u;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"790 73 OFFCURVE",
"800 164 QCURVE",
"892 164 LINE",
"820 456 LINE",
"820 340 LINE SMOOTH",
"820 250 OFFCURVE",
"702 160 OFFCURVE",
"582 160 QCURVE SMOOTH",
"446 160 OFFCURVE",
"306 342 OFFCURVE",
"306 520 QCURVE SMOOTH",
"306 702 OFFCURVE",
"449 900 OFFCURVE",
"580 900 QCURVE SMOOTH",
"700 900 OFFCURVE",
"820 769 OFFCURVE",
"820 636 QCURVE",
"882 868 LINE",
"800 868 LINE",
"787 975 OFFCURVE",
"648 1080 OFFCURVE",
"520 1080 QCURVE SMOOTH",
"318 1080 OFFCURVE",
"96 787 OFFCURVE",
"96 520 QCURVE SMOOTH",
"96 259 OFFCURVE",
"317 -20 OFFCURVE",
"518 -20 QCURVE SMOOTH",
"638 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1032 1060 LINE",
"840 1060 LINE",
"820 836 LINE",
"820 -460 LINE",
"1032 -460 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\01233 14 114 32 6 114 25 24 11 10 4 0 6 14 106 6 7 114 0 20 106 0 11 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0075;
unicode = 0075;
},
{
glyphname = v;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"661 900 OFFCURVE",
"796 900 QCURVE SMOOTH",
"873 900 OFFCURVE",
"942 798 OFFCURVE",
"942 682 QCURVE",
"1152 682 LINE",
"1152 892 OFFCURVE",
"1004 1080 OFFCURVE",
"840 1080 QCURVE SMOOTH",
"566 1080 OFFCURVE",
"548 788 QCURVE",
"466 788 LINE",
"528 456 LINE",
"528 669 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"788 186 LINE",
"80 186 LINE",
"80 0 LINE",
"788 0 LINE"
);
},
{
closed = 1;
nodes = (
"528 756 LINE",
"488 1060 LINE",
"316 1060 LINE",
"316 0 LINE",
"528 0 LINE"
);
},
{
closed = 1;
nodes = (
"474 1060 LINE",
"120 1060 LINE",
"120 874 LINE",
"494 874 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\0120 1 14 24 23 106 19 24 6 114 8 8 4 18 14 15 106 14 10 114 4 11 106 4 7 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[1]	/* ShiftPointByLastPoint */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0076;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1000 -8 OFFCURVE",
"1070 4 QCURVE",
"1046 190 LINE",
"974 181 OFFCURVE",
"862 170 OFFCURVE",
"812 170 QCURVE SMOOTH",
"671 170 OFFCURVE",
"548 284 OFFCURVE",
"548 410 QCURVE SMOOTH",
"548 580 LINE",
"336 580 LINE",
"336 400 LINE SMOOTH",
"336 180 OFFCURVE",
"551 -20 OFFCURVE",
"792 -20 QCURVE SMOOTH",
"867 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"548 1380 LINE",
"336 1380 LINE",
"336 500 LINE",
"548 500 LINE"
);
},
{
closed = 1;
nodes = (
"1030 1060 LINE",
"70 1060 LINE",
"70 874 LINE",
"1030 874 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\0124 21 16 16 0 21 20 106 21 17 105 21 6 114 0 9 106 0 11 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0077;
unicode = 0077;
},
{
glyphname = x;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"749 96 OFFCURVE",
"774 204 QCURVE",
"844 204 LINE",
"790 490 LINE",
"790 317 OFFCURVE",
"672 170 OFFCURVE",
"556 170 QCURVE SMOOTH",
"462 170 OFFCURVE",
"358 269 OFFCURVE",
"358 360 QCURVE SMOOTH",
"358 1060 LINE",
"146 1060 LINE",
"146 360 LINE SMOOTH",
"146 179 OFFCURVE",
"329 -20 OFFCURVE",
"496 -20 QCURVE SMOOTH",
"603 -20 OFFCURVE"
);
},
{
closed = 1;
nodes = (
"1148 170 LINE",
"1002 192 LINE",
"1002 430 LINE",
"790 430 LINE",
"790 244 LINE",
"808 -10 LINE",
"1148 0 LINE"
);
},
{
closed = 1;
nodes = (
"1002 1060 LINE",
"790 1060 LINE",
"790 300 LINE",
"1002 360 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 23 values pushed */\01223 21 106 23 10 114 12 20 24 3 14 14 0 25 4 6 114 0 9 106 0 11 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP1[ ]	/* SetRefPoint1 */\012IP[ ]	/* InterpolatePts */\012MDAP[1]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0078;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1120 1060 LINE",
"894 1060 LINE",
"609 180 LINE",
"591 180 LINE",
"306 1060 LINE",
"80 1060 LINE",
"459 0 LINE",
"741 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\0126 1 6 114 0 3 106 0 10 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni0079;
unicode = 0079;
},
{
glyphname = z;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"1130 1060 LINE",
"920 1060 LINE",
"830 160 LINE",
"812 160 LINE",
"687 1060 LINE",
"493 1060 LINE",
"580 842 LINE",
"596 842 LINE",
"720 0 LINE",
"980 0 LINE"
);
},
{
closed = 1;
nodes = (
"584 842 LINE",
"598 842 LINE",
"687 1060 LINE",
"493 1060 LINE",
"368 160 LINE",
"350 160 LINE",
"270 1060 LINE",
"70 1060 LINE",
"190 0 LINE",
"460 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01218 11 2 105 16 8 3 11 6 114 5 10 13 106 0 10 10 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SHP[0]	/* ShiftPointByLastPoint */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni007A;
unicode = 007A;
},
{
glyphname = braceleft;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"656 458 LINE",
"1094 1060 LINE",
"854 1060 LINE",
"528 584 LINE",
"106 0 LINE",
"346 0 LINE"
);
},
{
closed = 1;
nodes = (
"672 584 LINE",
"346 1060 LINE",
"106 1060 LINE",
"532 458 LINE",
"854 0 LINE",
"1094 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\0127 4 1 10 4 11 3 8 6 114 11 0 10 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012SRP2[ ]	/* SetRefPoint2 */\012SLOOP[ ]	/* SetLoopVariable */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni007B;
unicode = 007B;
},
{
glyphname = bar;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"397 -444 OFFCURVE",
"600 -328 OFFCURVE",
"749 -96 OFFCURVE",
"809 94 QCURVE SMOOTH",
"1115 1060 LINE",
"895 1060 LINE",
"631 144 LINE SMOOTH",
"591 4 OFFCURVE",
"485 -169 OFFCURVE",
"336 -257 OFFCURVE",
"231 -270 QCURVE SMOOTH",
"65 -290 LINE",
"75 -480 LINE",
"255 -460 LINE SMOOTH"
);
},
{
closed = 1;
nodes = (
"653 160 LINE",
"621 160 LINE",
"275 1060 LINE",
"55 1060 LINE",
"477 0 LINE",
"653 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0128 15 6 114 14 17 106 14 10 114 0 1 106 0 15 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni007C;
unicode = 007C;
},
{
glyphname = braceright;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"870 990 LINE",
"164 188 LINE",
"310 66 LINE",
"1016 872 LINE"
);
},
{
closed = 1;
nodes = (
"1036 188 LINE",
"164 188 LINE",
"164 0 LINE",
"1036 0 LINE"
);
},
{
closed = 1;
nodes = (
"1016 1060 LINE",
"164 1060 LINE",
"164 872 LINE",
"1016 872 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\0120 5 4 2 3 9 8 106 9 6 114 1 4 5 106 4 10 114 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012SHP[0]	/* ShiftPointByLastPoint */\012IP[ ]	/* InterpolatePts */\012SRP1[ ]	/* SetRefPoint1 */\012SRP2[ ]	/* SetRefPoint2 */\012IP[ ]	/* InterpolatePts */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni007D;
unicode = 007D;
},
{
glyphname = asciitilde;
layers = (
{
layerId = "A0E8E7F4-783D-4C25-B968-A37718E5A523";
paths = (
{
closed = 1;
nodes = (
"302 576 LINE SMOOTH",
"302 638 OFFCURVE",
"353 695 OFFCURVE",
"409 695 QCURVE SMOOTH",
"460 695 OFFCURVE",
"553 640 OFFCURVE",
"604 609 QCURVE SMOOTH",
"661 575 OFFCURVE",
"789 520 OFFCURVE",
"860 520 QCURVE SMOOTH",
"986 520 OFFCURVE",
"1100 677 OFFCURVE",
"1100 850 QCURVE SMOOTH",
"1100 930 LINE",
"898 930 LINE",
"898 840 LINE SMOOTH",
"898 778 OFFCURVE",
"858 721 OFFCURVE",
"813 721 QCURVE SMOOTH",
"766 721 OFFCURVE",
"679 778 OFFCURVE",
"630 807 QCURVE SMOOTH",
"572 842 OFFCURVE",
"443 896 OFFCURVE",
"370 896 QCURVE SMOOTH",
"228 896 OFFCURVE",
"100 739 OFFCURVE",
"100 566 QCURVE SMOOTH",
"100 486 LINE",
"302 486 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 12 values pushed */\01210 19 106 25 4 106 10 25 14 29 105 14 \012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MDAP[1]	/* MoveDirectAbsPt */\012CALL[ ]	/* CallFunction */\012IP[ ]	/* InterpolatePts */\012IP[ ]	/* InterpolatePts */\012CALL[ ]	/* CallFunction */\012CALL[ ]	/* CallFunction */\012IUP[0]	/* InterpolateUntPts */\012IUP[1]	/* InterpolateUntPts */";
};
width = 1200;
}
);
note = uni007E;
unicode = 007E;
}
);
instances = (
{
instanceInterpolations = {
"A0E8E7F4-783D-4C25-B968-A37718E5A523" = 1;
};
name = Regular;
weightClass = Normal;
}
);
unitsPerEm = 2048;
versionMajor = 2111;
versionMinor = 33;
}
